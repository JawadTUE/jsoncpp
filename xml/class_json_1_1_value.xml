<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="class_json_1_1_value" kind="class" language="C++" prot="public">
    <compoundname>Json::Value</compoundname>
    <includes refid="value_8h" local="no">value.h</includes>
    <innerclass refid="class_json_1_1_value_1_1_comments" prot="private">Json::Value::Comments</innerclass>
    <innerclass refid="union_json_1_1_value_1_1_value_holder" prot="private">Json::Value::ValueHolder</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_json_1_1_value_1a3b47cdb320b208e40f53b4d1c48fbe52" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> &gt;</type>
        <definition>using Json::Value::Members =  std::vector&lt;String&gt;</definition>
        <argsstring></argsstring>
        <name>Members</name>
        <qualifiedname>Json::Value::Members</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="110" column="3" bodyfile="include/json/value.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a69b2495ee8dc6d62a73b09f85bb00914" prot="public" static="no">
        <type><ref refid="class_json_1_1_value_iterator" kindref="compound">ValueIterator</ref></type>
        <definition>using Json::Value::iterator =  ValueIterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>Json::Value::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="111" column="3" bodyfile="include/json/value.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a6ebbc5b370efbb09c0973d7a4d7cd936" prot="public" static="no">
        <type><ref refid="class_json_1_1_value_const_iterator" kindref="compound">ValueConstIterator</ref></type>
        <definition>using Json::Value::const_iterator =  ValueConstIterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>Json::Value::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="112" column="3" bodyfile="include/json/value.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" prot="public" static="no">
        <type><ref refid="namespace_json_1a74d106771a079ca397eaffbf93d445be" kindref="member">Json::UInt</ref></type>
        <definition>using Json::Value::UInt =  Json::UInt</definition>
        <argsstring></argsstring>
        <name>UInt</name>
        <qualifiedname>Json::Value::UInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="113" column="3" bodyfile="include/json/value.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1aae5fc7132fb1d6d53a7ca5aab74cd49c" prot="public" static="no">
        <type><ref refid="namespace_json_1a9277f826baa1de2d303af893fa6f16ce" kindref="member">Json::Int</ref></type>
        <definition>using Json::Value::Int =  Json::Int</definition>
        <argsstring></argsstring>
        <name>Int</name>
        <qualifiedname>Json::Value::Int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="114" column="3" bodyfile="include/json/value.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a76faed915871e5b6b8d24e923f7ca6bc" prot="public" static="no">
        <type><ref refid="namespace_json_1a14aa7299a0ff9d2ec4350dcb93acf7f4" kindref="member">Json::UInt64</ref></type>
        <definition>using Json::Value::UInt64 =  Json::UInt64</definition>
        <argsstring></argsstring>
        <name>UInt64</name>
        <qualifiedname>Json::Value::UInt64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="116" column="3" bodyfile="include/json/value.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1ad91a5124c47e054aea3936aeacefcf32" prot="public" static="no">
        <type><ref refid="namespace_json_1a2458aa292509f109ee2c56aa56fb140a" kindref="member">Json::Int64</ref></type>
        <definition>using Json::Value::Int64 =  Json::Int64</definition>
        <argsstring></argsstring>
        <name>Int64</name>
        <qualifiedname>Json::Value::Int64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="117" column="3" bodyfile="include/json/value.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a6ce811c4ceb845590426eee1ac95fc99" prot="public" static="no">
        <type><ref refid="namespace_json_1a4740dd208d3b4278c0ab4a3b73146b45" kindref="member">Json::LargestInt</ref></type>
        <definition>using Json::Value::LargestInt =  Json::LargestInt</definition>
        <argsstring></argsstring>
        <name>LargestInt</name>
        <qualifiedname>Json::Value::LargestInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="119" column="3" bodyfile="include/json/value.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a6e5a59766fcd42192dd0a46c13a9a55b" prot="public" static="no">
        <type><ref refid="namespace_json_1acc8c7ef3383b2f4f33ff219810445bc6" kindref="member">Json::LargestUInt</ref></type>
        <definition>using Json::Value::LargestUInt =  Json::LargestUInt</definition>
        <argsstring></argsstring>
        <name>LargestUInt</name>
        <qualifiedname>Json::Value::LargestUInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="120" column="3" bodyfile="include/json/value.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" prot="public" static="no">
        <type><ref refid="namespace_json_1a1dee75d1d0b8282b43b8c5b7f0eff4b1" kindref="member">Json::ArrayIndex</ref></type>
        <definition>using Json::Value::ArrayIndex =  Json::ArrayIndex</definition>
        <argsstring></argsstring>
        <name>ArrayIndex</name>
        <qualifiedname>Json::Value::ArrayIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="121" column="3" bodyfile="include/json/value.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_value_1aebfc8cf55af7fc6101100c13f865d362" prot="public" static="no">
        <type>std::string</type>
        <definition>using Json::Value::value_type =  std::string</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Json::Value::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="123" column="3" bodyfile="include/json/value.h" bodystart="123" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_json_1_1_value_1ad016df56489e5d360735457afba2f649" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ValueIteratorBase</definition>
        <argsstring></argsstring>
        <name>ValueIteratorBase</name>
        <qualifiedname>Json::Value::ValueIteratorBase</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_iterator_base" kindref="compound">ValueIteratorBase</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="107" column="16" bodyfile="include/json/value.h" bodystart="107" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_json_1_1_value_1a21ddb05b92c60c7548e928bf371e7d45" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value const  &amp; Json::Value::null</definition>
        <argsstring></argsstring>
        <name>null</name>
        <qualifiedname>Json::Value::null</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1af2f124567acc35d021a424e53ebdfcab" kindref="member">Value::nullSingleton</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="127" column="22" bodyfile="include/json/value.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1aaee27e622f87266f861216d644603730" prot="public" static="yes" mutable="no">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value const  &amp; Json::Value::nullRef</definition>
        <argsstring></argsstring>
        <name>nullRef</name>
        <qualifiedname>Json::Value::nullRef</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1af2f124567acc35d021a424e53ebdfcab" kindref="member">Value::nullSingleton</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="128" column="22" bodyfile="include/json/value.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1af022bf2313a004f1f566ea7a6e24b660" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1a6ce811c4ceb845590426eee1ac95fc99" kindref="member">LargestInt</ref></type>
        <definition>LargestInt Json::Value::minLargestInt</definition>
        <argsstring></argsstring>
        <name>minLargestInt</name>
        <qualifiedname>Json::Value::minLargestInt</qualifiedname>
        <initializer>=
      <ref refid="class_json_1_1_value_1a6ce811c4ceb845590426eee1ac95fc99" kindref="member">LargestInt</ref>(~(<ref refid="class_json_1_1_value_1a6e5a59766fcd42192dd0a46c13a9a55b" kindref="member">LargestUInt</ref>(-1) / 2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="133" column="31" bodyfile="include/json/value.h" bodystart="133" bodyend="-1"/>
        <referencedby refid="class_json_1_1_our_reader_1a712270d53a2f023c2f406ac813548340" compoundref="json__reader_8cpp" startline="1449" endline="1506">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_reader_1a72f426ce3fa384d14aa10e9dd75618f0" compoundref="json__reader_8cpp" startline="493" endline="525">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="namespace_json_1aa7c8a95ed4a381676cf58b17d5d86e0d" compoundref="json__writer_8cpp" startline="87" endline="101">Json::valueToString</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a08a915ca68917f2ae15b5921747441db" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1a6ce811c4ceb845590426eee1ac95fc99" kindref="member">LargestInt</ref></type>
        <definition>LargestInt Json::Value::maxLargestInt</definition>
        <argsstring></argsstring>
        <name>maxLargestInt</name>
        <qualifiedname>Json::Value::maxLargestInt</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1a6ce811c4ceb845590426eee1ac95fc99" kindref="member">LargestInt</ref>(<ref refid="class_json_1_1_value_1a6e5a59766fcd42192dd0a46c13a9a55b" kindref="member">LargestUInt</ref>(-1) / 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="136" column="31" bodyfile="include/json/value.h" bodystart="136" bodyend="-1"/>
        <referencedby refid="class_json_1_1_our_reader_1a712270d53a2f023c2f406ac813548340" compoundref="json__reader_8cpp" startline="1449" endline="1506">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_reader_1a72f426ce3fa384d14aa10e9dd75618f0" compoundref="json__reader_8cpp" startline="493" endline="525">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="namespace_json_1aa7c8a95ed4a381676cf58b17d5d86e0d" compoundref="json__writer_8cpp" startline="87" endline="101">Json::valueToString</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1abe4fdaa8d0e044fb84d31d88a095f8a8" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1a6e5a59766fcd42192dd0a46c13a9a55b" kindref="member">LargestUInt</ref></type>
        <definition>LargestUInt Json::Value::maxLargestUInt</definition>
        <argsstring></argsstring>
        <name>maxLargestUInt</name>
        <qualifiedname>Json::Value::maxLargestUInt</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1a6e5a59766fcd42192dd0a46c13a9a55b" kindref="member">LargestUInt</ref>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="138" column="32" bodyfile="include/json/value.h" bodystart="138" bodyend="-1"/>
        <referencedby refid="class_json_1_1_our_reader_1a712270d53a2f023c2f406ac813548340" compoundref="json__reader_8cpp" startline="1449" endline="1506">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_reader_1a72f426ce3fa384d14aa10e9dd75618f0" compoundref="json__reader_8cpp" startline="493" endline="525">Json::Reader::decodeNumber</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1adf754fa3bfc9897ac4b5158039b25d9f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1aae5fc7132fb1d6d53a7ca5aab74cd49c" kindref="member">Int</ref></type>
        <definition>Int Json::Value::minInt</definition>
        <argsstring></argsstring>
        <name>minInt</name>
        <qualifiedname>Json::Value::minInt</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1aae5fc7132fb1d6d53a7ca5aab74cd49c" kindref="member">Int</ref>(~(<ref refid="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" kindref="member">UInt</ref>(-1) / 2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="140" column="24" bodyfile="include/json/value.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1ab6042b06093ce9871db116aa8b8e9c90" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1aae5fc7132fb1d6d53a7ca5aab74cd49c" kindref="member">Int</ref></type>
        <definition>Int Json::Value::maxInt</definition>
        <argsstring></argsstring>
        <name>maxInt</name>
        <qualifiedname>Json::Value::maxInt</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1aae5fc7132fb1d6d53a7ca5aab74cd49c" kindref="member">Int</ref>(<ref refid="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" kindref="member">UInt</ref>(-1) / 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="142" column="24" bodyfile="include/json/value.h" bodystart="142" bodyend="-1"/>
        <referencedby refid="class_json_1_1_reader_1a72f426ce3fa384d14aa10e9dd75618f0" compoundref="json__reader_8cpp" startline="493" endline="525">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="namespace_json_1aef6a987788e83e3d123816745b1c3431" compoundref="json__value_8cpp" startline="107" endline="123">Json::duplicateAndPrefixStringValue</referencedby>
        <referencedby refid="namespace_json_1a0c9384eed1624da7aa0bda3c89f5ae72" compoundref="json__value_8cpp" startline="93" endline="105">Json::duplicateStringValue</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1afed7d67975ffa7852d02f245c280a6b7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" kindref="member">UInt</ref></type>
        <definition>UInt Json::Value::maxUInt</definition>
        <argsstring></argsstring>
        <name>maxUInt</name>
        <qualifiedname>Json::Value::maxUInt</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" kindref="member">UInt</ref>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="144" column="25" bodyfile="include/json/value.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1ae6e1b822e2516c49e79782fe50b70a5f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1ad91a5124c47e054aea3936aeacefcf32" kindref="member">Int64</ref></type>
        <definition>Int64 Json::Value::minInt64</definition>
        <argsstring></argsstring>
        <name>minInt64</name>
        <qualifiedname>Json::Value::minInt64</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1ad91a5124c47e054aea3936aeacefcf32" kindref="member">Int64</ref>(~(<ref refid="class_json_1_1_value_1a76faed915871e5b6b8d24e923f7ca6bc" kindref="member">UInt64</ref>(-1) / 2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="148" column="26" bodyfile="include/json/value.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a1a1fcb7db5fa9fafc1c8357765213975" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1ad91a5124c47e054aea3936aeacefcf32" kindref="member">Int64</ref></type>
        <definition>Int64 Json::Value::maxInt64</definition>
        <argsstring></argsstring>
        <name>maxInt64</name>
        <qualifiedname>Json::Value::maxInt64</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1ad91a5124c47e054aea3936aeacefcf32" kindref="member">Int64</ref>(<ref refid="class_json_1_1_value_1a76faed915871e5b6b8d24e923f7ca6bc" kindref="member">UInt64</ref>(-1) / 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="150" column="26" bodyfile="include/json/value.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1ade2162cbad414f7770d31c88664f62e4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1a76faed915871e5b6b8d24e923f7ca6bc" kindref="member">UInt64</ref></type>
        <definition>UInt64 Json::Value::maxUInt64</definition>
        <argsstring></argsstring>
        <name>maxUInt64</name>
        <qualifiedname>Json::Value::maxUInt64</qualifiedname>
        <initializer>= <ref refid="class_json_1_1_value_1a76faed915871e5b6b8d24e923f7ca6bc" kindref="member">UInt64</ref>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="152" column="27" bodyfile="include/json/value.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a66b0728adfe54e8f7652a180b21a2812" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" kindref="member">UInt</ref></type>
        <definition>UInt Json::Value::defaultRealPrecision</definition>
        <argsstring></argsstring>
        <name>defaultRealPrecision</name>
        <qualifiedname>Json::Value::defaultRealPrecision</qualifiedname>
        <initializer>= 17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="155" column="25" bodyfile="include/json/value.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a38a9ec974d3938d49b84db915489b76a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>double</type>
        <definition>double Json::Value::maxUInt64AsDouble</definition>
        <argsstring></argsstring>
        <name>maxUInt64AsDouble</name>
        <qualifiedname>Json::Value::maxUInt64AsDouble</qualifiedname>
        <initializer>= 18446744073709551615.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="157" column="27" bodyfile="include/json/value.h" bodystart="157" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_json_1_1_value_1a5c7528646aef18a7f70707e0a4bf1afc" prot="public" static="no" mutable="no">
        <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
        <definition>CommentPlacement Json::Value::placement</definition>
        <argsstring></argsstring>
        <name>placement</name>
        <qualifiedname>Json::Value::placement</qualifiedname>
        <initializer>{
    <ref refid="class_json_1_1_value_1a2900152a2887b410a9ddabe278b9d492" kindref="member">setComment</ref>(<ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref>(comment, strlen(comment)), placement)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="351" column="29" bodyfile="include/json/value.h" bodystart="351" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a43a09822e756ba45deff61195a9ba12d" compoundref="json__value_8cpp" startline="1336" endline="1338">getComment</referencedby>
        <referencedby refid="class_json_1_1_value_1a65d8e3ab6a5871cbd019a3e0f0b944a3" compoundref="json__value_8cpp" startline="1332" endline="1334">hasComment</referencedby>
        <referencedby refid="class_json_1_1_value_1aeec137a52217bf72e9000d75eef5e46e" compoundref="json__value_8cpp" startline="1322" endline="1330">setComment</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1acd89c088d71de91e9f999d17a249df45" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Json::Value::value_type_</definition>
        <argsstring></argsstring>
        <name>value_type_</name>
        <qualifiedname>Json::Value::value_type_</qualifiedname>
        <bitfield> 8</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="411" column="18" bodyfile="include/json/value.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Json::Value::allocated_</definition>
        <argsstring></argsstring>
        <name>allocated_</name>
        <qualifiedname>Json::Value::allocated_</qualifiedname>
        <bitfield> 1</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="413" column="18" bodyfile="include/json/value.h" bodystart="413" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe" prot="private" static="no" mutable="no">
        <type>union <ref refid="union_json_1_1_value_1_1_value_holder" kindref="compound">Json::Value::ValueHolder</ref></type>
        <definition>union Json::Value::ValueHolder Json::Value::value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <qualifiedname>Json::Value::value_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="407" column="10"/>
        <referencedby refid="class_json_1_1_value_1a2d45bb2e68e8f22fe356d7d955ebd3c9" compoundref="json__value_8cpp" startline="1384" endline="1395">begin</referencedby>
        <referencedby refid="class_json_1_1_value_1a015459a3950c198d63a2d3be8f5ae296" compoundref="json__value_8cpp" startline="1358" endline="1369">begin</referencedby>
        <referencedby refid="class_json_1_1_value_1a13a986e39651853469b6c3ef39898b0a" compoundref="json__value_8cpp" startline="902" endline="932">dupPayload</referencedby>
        <referencedby refid="class_json_1_1_value_1a2f961eff73f7f79cd29260b6cbd42558" compoundref="json__value_8cpp" startline="1397" endline="1408">end</referencedby>
        <referencedby refid="class_json_1_1_value_1a3e443cd0ef24f7e028b175e47ee045e0" compoundref="json__value_8cpp" startline="1371" endline="1382">end</referencedby>
        <referencedby refid="class_json_1_1_value_1aac6bd14155b88ed2d39ef54820b39e49" compoundref="json__value_8cpp" startline="416" endline="464">operator&lt;</referencedby>
        <referencedby refid="class_json_1_1_value_1a16f9250e30d5c4505cd11137c564a764" compoundref="json__value_8cpp" startline="472" endline="512">operator==</referencedby>
        <referencedby refid="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" compoundref="json__value_8cpp" startline="382" endline="385">swapPayload</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a22acc144a228b4e789cf194e0a0fca25" prot="private" static="no" mutable="no">
        <type>struct <ref refid="class_json_1_1_value" kindref="compound">Json::Value</ref></type>
        <definition>struct Json::Value Json::Value::bits_</definition>
        <argsstring></argsstring>
        <name>bits_</name>
        <qualifiedname>Json::Value::bits_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="414" column="9"/>
        <referencedby refid="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" compoundref="json__value_8cpp" startline="382" endline="385">swapPayload</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1aa71481376285b2f76d558f3ef6967e2a" prot="private" static="no" mutable="no">
        <type><ref refid="class_json_1_1_value_1_1_comments" kindref="compound">Comments</ref></type>
        <definition>Comments Json::Value::comments_</definition>
        <argsstring></argsstring>
        <name>comments_</name>
        <qualifiedname>Json::Value::comments_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="431" column="12" bodyfile="include/json/value.h" bodystart="431" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a0a277596eda744a8d1ffb6dec43b8627" compoundref="json__value_8cpp" startline="955" endline="959">dupMeta</referencedby>
        <referencedby refid="class_json_1_1_value_1a43a09822e756ba45deff61195a9ba12d" compoundref="json__value_8cpp" startline="1336" endline="1338">getComment</referencedby>
        <referencedby refid="class_json_1_1_value_1a65d8e3ab6a5871cbd019a3e0f0b944a3" compoundref="json__value_8cpp" startline="1332" endline="1334">hasComment</referencedby>
        <referencedby refid="class_json_1_1_value_1aeec137a52217bf72e9000d75eef5e46e" compoundref="json__value_8cpp" startline="1322" endline="1330">setComment</referencedby>
        <referencedby refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" compoundref="json__value_8cpp" startline="392" endline="397">swap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1a1c3aeb0fa8fefe93776cb347c76a25a8" prot="private" static="no" mutable="no">
        <type>ptrdiff_t</type>
        <definition>ptrdiff_t Json::Value::start_</definition>
        <argsstring></argsstring>
        <name>start_</name>
        <qualifiedname>Json::Value::start_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="433" column="13" bodyfile="include/json/value.h" bodystart="433" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a0a277596eda744a8d1ffb6dec43b8627" compoundref="json__value_8cpp" startline="955" endline="959">dupMeta</referencedby>
        <referencedby refid="class_json_1_1_value_1afa081dc764000951a1d8d6148155508e" compoundref="json__value_8cpp" startline="1344" endline="1344">getOffsetStart</referencedby>
        <referencedby refid="class_json_1_1_value_1a92e32ea0f4f8a15853a3cf0beac9feb9" compoundref="json__value_8cpp" startline="1340" endline="1340">setOffsetStart</referencedby>
        <referencedby refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" compoundref="json__value_8cpp" startline="392" endline="397">swap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_json_1_1_value_1afe377e25f6d3b5b8ea7221c84f29412a" prot="private" static="no" mutable="no">
        <type>ptrdiff_t</type>
        <definition>ptrdiff_t Json::Value::limit_</definition>
        <argsstring></argsstring>
        <name>limit_</name>
        <qualifiedname>Json::Value::limit_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="434" column="13" bodyfile="include/json/value.h" bodystart="434" bodyend="-1"/>
        <referencedby refid="class_json_1_1_value_1a0a277596eda744a8d1ffb6dec43b8627" compoundref="json__value_8cpp" startline="955" endline="959">dupMeta</referencedby>
        <referencedby refid="class_json_1_1_value_1a2cdfa01935f87fcace90d450cbd2c0a4" compoundref="json__value_8cpp" startline="1346" endline="1346">getOffsetLimit</referencedby>
        <referencedby refid="class_json_1_1_value_1a5e4f5853fec138150c5df6004a8c2bcf" compoundref="json__value_8cpp" startline="1342" endline="1342">setOffsetLimit</referencedby>
        <referencedby refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" compoundref="json__value_8cpp" startline="392" endline="397">swap</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_json_1_1_value_1af2f124567acc35d021a424e53ebdfcab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> const &amp;</type>
        <definition>Value const  &amp; Json::Value::nullSingleton</definition>
        <argsstring>()</argsstring>
        <name>nullSingleton</name>
        <qualifiedname>Json::Value::nullSingleton</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="131" column="22" bodyfile="src/lib_json/json_value.cpp" bodystart="59" bodyend="62"/>
        <referencedby refid="class_json_1_1_path_1ad1abdc54d2e03fc0e9436c3b9fd55a33" compoundref="json__value_8cpp" startline="1475" endline="1494">Json::Path::resolve</referencedby>
        <referencedby refid="class_json_1_1_path_1ab65ab001ccdbc6f8b5f123da58b92539" compoundref="json__value_8cpp" startline="1496" endline="1512">Json::Path::resolve</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(ValueType type=nullValue)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" kindref="member">nullValue</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="203" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="274" bodyend="300"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="41">JSON_ASSERT_UNREACHABLE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a4744ae571fcf34f4b16a2257b3b3b585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(Int value)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1aae5fc7132fb1d6d53a7ca5aab74cd49c" kindref="member">Int</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="204" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="302" bodyend="305"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ae67a857b01286e3499a87e95be848d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(UInt value)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" kindref="member">UInt</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="205" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="307" bodyend="310"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab1cdc3d9a4d4cc03fa01439d43ceb1b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(Int64 value)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1ad91a5124c47e054aea3936aeacefcf32" kindref="member">Int64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="207" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="312" bodyend="315"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a8adda58d5ae17bf7ca6a53bab4a7b69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(UInt64 value)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a76faed915871e5b6b8d24e923f7ca6bc" kindref="member">UInt64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="208" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="316" bodyend="319"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a32228cc84d83200cca8441451997996c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(double value)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="210" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="322" bodyend="325"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ad87b849356816aca75995dd07302e49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const char *value)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="211" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="327" bodyend="333"/>
        <references refid="namespace_json_1aef6a987788e83e3d123816745b1c3431" compoundref="json__value_8cpp" startline="107" endline="123">Json::duplicateAndPrefixStringValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a39fa09d1902efbd4350e1236db920571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const char *begin, const char *end)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="212" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="335" bodyend="339"/>
        <references refid="namespace_json_1aef6a987788e83e3d123816745b1c3431" compoundref="json__value_8cpp" startline="107" endline="123">Json::duplicateAndPrefixStringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a081830e95f88a37054da7e46c65b0766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const StaticString &amp;value)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_static_string" kindref="compound">StaticString</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="214" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="347" bodyend="350"/>
        <references refid="class_json_1_1_static_string_1af11e3fc5823978e2946f06caa046ac3c" compoundref="value_8h" startline="100" endline="100">Json::StaticString::c_str</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a0ee1ff8974f050b80308a2dc580b8867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const String &amp;value)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type>const <ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="215" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="341" bodyend="345"/>
        <references refid="namespace_json_1aef6a987788e83e3d123816745b1c3431" compoundref="json__value_8cpp" startline="107" endline="123">Json::duplicateAndPrefixStringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a350a31ea4a30d384994b0bc010b17495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(bool value)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="216" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="352" bodyend="355"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a08a632cc1a237067431cff954866121f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(std::nullptr_t ptr)=delete</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type>std::nullptr_t</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="217" column="3"/>
        <references refid="namespace_json_1a86063654ac54c5e00f2f559f2c363b4e" compoundref="allocator_8h" startline="63" endline="65">Json::operator!=</references>
        <references refid="namespace_json_1a85a761cd8643a538387c0fe37bb937e8" compoundref="allocator_8h" startline="58" endline="60">Json::operator==</references>
        <references refid="namespace_json_1afed1c011474d8243d72fc38f43de0f8e" compoundref="value_8h" startline="649" endline="649">Json::swap</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a436dfd3670f95fd665f680eba5cebcf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="218" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1adace4216e0f5b3be7f855adebae6aa0b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Json::Value::Value</definition>
        <argsstring>(Value &amp;&amp;other) noexcept</argsstring>
        <name>Value</name>
        <qualifiedname>Json::Value::Value</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="219" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="362" bodyend="365"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1afed1c011474d8243d72fc38f43de0f8e" compoundref="value_8h" startline="649" endline="649">Json::swap</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a287dea48da3912d02756735bf677b27b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::~Value</definition>
        <argsstring>()</argsstring>
        <name>~Value</name>
        <qualifiedname>Json::Value::~Value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="220" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ade21ab9710b64fee954b5fcceb0d37dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator=</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>Json::Value::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="222" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="372" bodyend="375"/>
        <references refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" compoundref="json__value_8cpp" startline="392" endline="397">swap</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a000d796a5fc0c29162b63617dc4a697c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator=</definition>
        <argsstring>(Value &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>Json::Value::operator=</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="223" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::swap</definition>
        <argsstring>(Value &amp;other)</argsstring>
        <name>swap</name>
        <qualifiedname>Json::Value::swap</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="225" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="392" bodyend="397"/>
        <references refid="class_json_1_1_value_1aa71481376285b2f76d558f3ef6967e2a" compoundref="value_8h" startline="431">comments_</references>
        <references refid="class_json_1_1_value_1afe377e25f6d3b5b8ea7221c84f29412a" compoundref="value_8h" startline="434">limit_</references>
        <references refid="class_json_1_1_value_1a1c3aeb0fa8fefe93776cb347c76a25a8" compoundref="value_8h" startline="433">start_</references>
        <referencedby refid="class_json_1_1_value_1ade21ab9710b64fee954b5fcceb0d37dd" compoundref="json__value_8cpp" startline="372" endline="375">operator=</referencedby>
        <referencedby refid="namespace_json_1afed1c011474d8243d72fc38f43de0f8e" compoundref="value_8h" startline="649" endline="649">Json::swap</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::swapPayload</definition>
        <argsstring>(Value &amp;other)</argsstring>
        <name>swapPayload</name>
        <qualifiedname>Json::Value::swapPayload</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="227" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="382" bodyend="385"/>
        <references refid="class_json_1_1_value_1a22acc144a228b4e789cf194e0a0fca25">bits_</references>
        <references refid="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe">value_</references>
        <referencedby refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" compoundref="json__reader_8cpp" startline="1508" endline="1516">Json::OurReader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_reader_1a2420bbb7fd6d5d3e7e2fea894dd8f70f" compoundref="json__reader_8cpp" startline="527" endline="535">Json::Reader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" compoundref="json__reader_8cpp" startline="1439" endline="1447">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_reader_1a442d1f23edf0f4350f5eeab3ee3f7d46" compoundref="json__reader_8cpp" startline="483" endline="491">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" compoundref="json__reader_8cpp" startline="1534" endline="1543">Json::OurReader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_reader_1aaf736937912f5c9b8d221e57f209e3e0" compoundref="json__reader_8cpp" startline="553" endline="562">Json::Reader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a0b9f58faf4212c6ecb5d8e2a1ac10257" compoundref="json__reader_8cpp" startline="1404" endline="1437">Json::OurReader::readArray</referencedby>
        <referencedby refid="class_json_1_1_reader_1afd9a30c0af205c9f327613f486fae6b8" compoundref="json__reader_8cpp" startline="450" endline="481">Json::Reader::readArray</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aea198f8101dba55099f4d8121a993530" compoundref="json__reader_8cpp" startline="1350" endline="1402">Json::OurReader::readObject</referencedby>
        <referencedby refid="class_json_1_1_reader_1a0068eb3d8e86e91f0e4806f60da66b9c" compoundref="json__reader_8cpp" startline="403" endline="448">Json::Reader::readObject</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" compoundref="json__reader_8cpp" startline="972" endline="1059">Json::OurReader::readValue</referencedby>
        <referencedby refid="class_json_1_1_reader_1a47e56844b803d41ec993a83fadf4495c" compoundref="json__reader_8cpp" startline="124" endline="193">Json::Reader::readValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a1b2c6379664d91b9f1bcd4d1853e5970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::copy</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>copy</name>
        <qualifiedname>Json::Value::copy</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="229" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab504d299cfaa440392037fa8a3c54064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::copyPayload</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>copyPayload</name>
        <qualifiedname>Json::Value::copyPayload</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="231" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a8ce61157a011894f0252ceed232312de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
        <definition>ValueType Json::Value::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>Json::Value::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="233" column="13" bodyfile="src/lib_json/json_value.cpp" bodystart="404" bodyend="406"/>
        <referencedby refid="class_json_1_1_value_1a2d45bb2e68e8f22fe356d7d955ebd3c9" compoundref="json__value_8cpp" startline="1384" endline="1395">begin</referencedby>
        <referencedby refid="class_json_1_1_value_1a015459a3950c198d63a2d3be8f5ae296" compoundref="json__value_8cpp" startline="1358" endline="1369">begin</referencedby>
        <referencedby refid="class_json_1_1_value_1a13a986e39651853469b6c3ef39898b0a" compoundref="json__value_8cpp" startline="902" endline="932">dupPayload</referencedby>
        <referencedby refid="class_json_1_1_value_1a2f961eff73f7f79cd29260b6cbd42558" compoundref="json__value_8cpp" startline="1397" endline="1408">end</referencedby>
        <referencedby refid="class_json_1_1_value_1a3e443cd0ef24f7e028b175e47ee045e0" compoundref="json__value_8cpp" startline="1371" endline="1382">end</referencedby>
        <referencedby refid="class_json_1_1_value_1aac6bd14155b88ed2d39ef54820b39e49" compoundref="json__value_8cpp" startline="416" endline="464">operator&lt;</referencedby>
        <referencedby refid="class_json_1_1_value_1a16f9250e30d5c4505cd11137c564a764" compoundref="json__value_8cpp" startline="472" endline="512">operator==</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="880" endline="940">Json::BuiltStyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="350" endline="400">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="626" endline="683">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="415" endline="472">Json::StyledWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aac6bd14155b88ed2d39ef54820b39e49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator&lt;</definition>
        <argsstring>(const Value &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>Json::Value::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="235" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="416" bodyend="464"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="404">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="124" endline="133">Json::decodePrefixedString</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="401">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="class_json_1_1_value_1a7d552fbdbea4dcff62c74553df15544f" compoundref="value_8h" startline="389" endline="389">isAllocated</references>
        <references refid="assertions_8h_1a188941dcc789ccb6539c3d6f41405582" compoundref="assertions_8h" startline="13" endline="18">JSON_ASSERT</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="41">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="406">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="403">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="405">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
        <references refid="class_json_1_1_value_1a8ce61157a011894f0252ceed232312de" compoundref="json__value_8cpp" startline="404" endline="406">type</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="402">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
        <references refid="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a40c411a320a416d5eac0052b36211286" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator&lt;=</definition>
        <argsstring>(const Value &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>Json::Value::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="236" column="3" bodyfile="src/lib_json/json_value.cpp" bodystart="466" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1afe2c3e52df60b9622cbd8358b74bdbf5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator&gt;=</definition>
        <argsstring>(const Value &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>Json::Value::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="237" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="468" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a4646c2f0764908c0972160c7c2ebe567" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator&gt;</definition>
        <argsstring>(const Value &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>Json::Value::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="238" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="470" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a16f9250e30d5c4505cd11137c564a764" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator==</definition>
        <argsstring>(const Value &amp;other) const</argsstring>
        <name>operator==</name>
        <qualifiedname>Json::Value::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="239" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="472" bodyend="512"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a92edab1861dadbfefd8be5fd4285eefe" compoundref="value_8h" startline="404">Json::Value::ValueHolder::bool_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="124" endline="133">Json::decodePrefixedString</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1adbfb384301298844ed955ba5cf6015a0" compoundref="value_8h" startline="401">Json::Value::ValueHolder::int_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="class_json_1_1_value_1a7d552fbdbea4dcff62c74553df15544f" compoundref="value_8h" startline="389" endline="389">isAllocated</references>
        <references refid="assertions_8h_1a188941dcc789ccb6539c3d6f41405582" compoundref="assertions_8h" startline="13" endline="18">JSON_ASSERT</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="41">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="406">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1af0c5ca724e5fe3a15db773d750e2351e" compoundref="value_8h" startline="403">Json::Value::ValueHolder::real_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="405">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
        <references refid="class_json_1_1_value_1a8ce61157a011894f0252ceed232312de" compoundref="json__value_8cpp" startline="404" endline="406">type</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1aab65665dc15a24a29a8e93cdeeaa7e50" compoundref="value_8h" startline="402">Json::Value::ValueHolder::uint_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
        <references refid="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a86e95be072e515c48abc61dec63a1689" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::operator!=</definition>
        <argsstring>(const Value &amp;other) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>Json::Value::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="240" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="514" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aefa4464ca1bb0bcc9a87b38ed62ca2e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Json::Value::compare</definition>
        <argsstring>(const Value &amp;other) const</argsstring>
        <name>compare</name>
        <qualifiedname>Json::Value::compare</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="241" column="7" bodyfile="src/lib_json/json_value.cpp" bodystart="408" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a16668c8db7ef0a5de040012f0dfd84b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * Json::Value::asCString</definition>
        <argsstring>() const</argsstring>
        <name>asCString</name>
        <qualifiedname>Json::Value::asCString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="243" column="14" bodyfile="src/lib_json/json_value.cpp" bodystart="516" bodyend="526"/>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="124" endline="133">Json::decodePrefixedString</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a52207c8d4e86160f968a40817cb2529b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref></type>
        <definition>String Json::Value::asString</definition>
        <argsstring>() const</argsstring>
        <name>asString</name>
        <qualifiedname>Json::Value::asString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="248" column="10" bodyfile="src/lib_json/json_value.cpp" bodystart="554" bodyend="578"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="124" endline="133">Json::decodePrefixedString</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="20" endline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
        <references refid="namespace_json_1a6a9fc77df9b882fced01b0fd6a3b439e" compoundref="json__writer_8cpp" startline="113" endline="113">Json::valueToString</references>
        <referencedby refid="class_json_1_1_stream_writer_builder_1a042d21b84d8c5bede52a764e2ada7d65" compoundref="json__writer_8cpp" startline="1088" endline="1129">Json::StreamWriterBuilder::newStreamWriter</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aea198f8101dba55099f4d8121a993530" compoundref="json__reader_8cpp" startline="1350" endline="1402">Json::OurReader::readObject</referencedby>
        <referencedby refid="class_json_1_1_reader_1a0068eb3d8e86e91f0e4806f60da66b9c" compoundref="json__reader_8cpp" startline="403" endline="448">Json::Reader::readObject</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2e1b7be6bde2fe23f15290d9ddbbdf8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::getString</definition>
        <argsstring>(char const **begin, char const **end) const</argsstring>
        <name>getString</name>
        <qualifiedname>Json::Value::getString</qualifiedname>
        <param>
          <type>char const **</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="250" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="542" bodyend="552"/>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="124" endline="133">Json::decodePrefixedString</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="880" endline="940">Json::BuiltStyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="350" endline="400">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="626" endline="683">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="415" endline="472">Json::StyledWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a614d635bc248a592593feb322cd15ab8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1aae5fc7132fb1d6d53a7ca5aab74cd49c" kindref="member">Int</ref></type>
        <definition>Value::Int Json::Value::asInt</definition>
        <argsstring>() const</argsstring>
        <name>asInt</name>
        <qualifiedname>Json::Value::asInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="251" column="7" bodyfile="src/lib_json/json_value.cpp" bodystart="580" bodyend="600"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="72" endline="75">Json::InRange</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="20" endline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a74b305583ec3aacf4f9dd06e799dc265" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" kindref="member">UInt</ref></type>
        <definition>Value::UInt Json::Value::asUInt</definition>
        <argsstring>() const</argsstring>
        <name>asUInt</name>
        <qualifiedname>Json::Value::asUInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="252" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="602" bodyend="622"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="72" endline="75">Json::InRange</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="20" endline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
        <referencedby refid="class_json_1_1_char_reader_builder_1a81da7da750111321ff14baf0f0a4c8ae" compoundref="json__reader_8cpp" startline="1774" endline="1791">Json::CharReaderBuilder::newCharReader</referencedby>
        <referencedby refid="class_json_1_1_stream_writer_builder_1a042d21b84d8c5bede52a764e2ada7d65" compoundref="json__writer_8cpp" startline="1088" endline="1129">Json::StreamWriterBuilder::newStreamWriter</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aa647ac4fe51a2e325c063ebe32262b44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1ad91a5124c47e054aea3936aeacefcf32" kindref="member">Int64</ref></type>
        <definition>Value::Int64 Json::Value::asInt64</definition>
        <argsstring>() const</argsstring>
        <name>asInt64</name>
        <qualifiedname>Json::Value::asInt64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="254" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="626" bodyend="648"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="72" endline="75">Json::InRange</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="20" endline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a0e44a5a4cd0c099f9570dfa25813eb60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a76faed915871e5b6b8d24e923f7ca6bc" kindref="member">UInt64</ref></type>
        <definition>Value::UInt64 Json::Value::asUInt64</definition>
        <argsstring>() const</argsstring>
        <name>asUInt64</name>
        <qualifiedname>Json::Value::asUInt64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="255" column="10" bodyfile="src/lib_json/json_value.cpp" bodystart="650" bodyend="669"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="72" endline="75">Json::InRange</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="20" endline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab16f2ea2a117a1b3b576acab8b6a700d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a6ce811c4ceb845590426eee1ac95fc99" kindref="member">LargestInt</ref></type>
        <definition>LargestInt Json::Value::asLargestInt</definition>
        <argsstring>() const</argsstring>
        <name>asLargestInt</name>
        <qualifiedname>Json::Value::asLargestInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="257" column="14" bodyfile="src/lib_json/json_value.cpp" bodystart="672" bodyend="678"/>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="880" endline="940">Json::BuiltStyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="350" endline="400">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="626" endline="683">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="415" endline="472">Json::StyledWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ad03548101e0bf3d2d9eac75c64a0b8d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a6e5a59766fcd42192dd0a46c13a9a55b" kindref="member">LargestUInt</ref></type>
        <definition>LargestUInt Json::Value::asLargestUInt</definition>
        <argsstring>() const</argsstring>
        <name>asLargestUInt</name>
        <qualifiedname>Json::Value::asLargestUInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="258" column="15" bodyfile="src/lib_json/json_value.cpp" bodystart="680" bodyend="686"/>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="880" endline="940">Json::BuiltStyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="350" endline="400">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="626" endline="683">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="415" endline="472">Json::StyledWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1af3a4d10bf575fabdc5440a7135c9649c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Json::Value::asFloat</definition>
        <argsstring>() const</argsstring>
        <name>asFloat</name>
        <qualifiedname>Json::Value::asFloat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="259" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="710" bodyend="730"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="20" endline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1afd24002a18aef907ad746b1cb9eda0a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Json::Value::asDouble</definition>
        <argsstring>() const</argsstring>
        <name>asDouble</name>
        <qualifiedname>Json::Value::asDouble</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="260" column="10" bodyfile="src/lib_json/json_value.cpp" bodystart="688" bodyend="708"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="20" endline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="880" endline="940">Json::BuiltStyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="350" endline="400">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="626" endline="683">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="415" endline="472">Json::StyledWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab693fb7b9b1595bb0adc49658bbf780d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::asBool</definition>
        <argsstring>() const</argsstring>
        <name>asBool</name>
        <qualifiedname>Json::Value::asBool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="261" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="732" bodyend="750"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="assertions_8h_1a67007439f94bc6afc465923f56147ba1" compoundref="assertions_8h" startline="20" endline="26">JSON_FAIL_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
        <referencedby refid="class_json_1_1_char_reader_builder_1a81da7da750111321ff14baf0f0a4c8ae" compoundref="json__reader_8cpp" startline="1774" endline="1791">Json::CharReaderBuilder::newCharReader</referencedby>
        <referencedby refid="class_json_1_1_stream_writer_builder_1a042d21b84d8c5bede52a764e2ada7d65" compoundref="json__writer_8cpp" startline="1088" endline="1129">Json::StreamWriterBuilder::newStreamWriter</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="880" endline="940">Json::BuiltStyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="350" endline="400">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="626" endline="683">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="415" endline="472">Json::StyledWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1abde4070e21e46dc4f8203f66582cb19f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isNull</definition>
        <argsstring>() const</argsstring>
        <name>isNull</name>
        <qualifiedname>Json::Value::isNull</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="263" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1177" bodyend="1177"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab1f02651cb89d0f18b63a036959391ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isBool</definition>
        <argsstring>() const</argsstring>
        <name>isBool</name>
        <qualifiedname>Json::Value::isBool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="264" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1179" bodyend="1179"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aff51d8b52979ca06cf9d909accd5f695" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isInt</definition>
        <argsstring>() const</argsstring>
        <name>isInt</name>
        <qualifiedname>Json::Value::isInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="265" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1181" bodyend="1198"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" compoundref="json__value_8cpp" startline="1172" endline="1175">Json::IsIntegral</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a4a81fb3c3acdbb68b2e2f30836a4f53e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isInt64</definition>
        <argsstring>() const</argsstring>
        <name>isInt64</name>
        <qualifiedname>Json::Value::isInt64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="266" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1223" bodyend="1238"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" compoundref="json__value_8cpp" startline="1172" endline="1175">Json::IsIntegral</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1abdda463d3269015f883587349726cfbc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isUInt</definition>
        <argsstring>() const</argsstring>
        <name>isUInt</name>
        <qualifiedname>Json::Value::isUInt</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="267" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1200" bodyend="1221"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" compoundref="json__value_8cpp" startline="1172" endline="1175">Json::IsIntegral</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a883576e35cb03a785258edb56777a2de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isUInt64</definition>
        <argsstring>() const</argsstring>
        <name>isUInt64</name>
        <qualifiedname>Json::Value::isUInt64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="268" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1240" bodyend="1255"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" compoundref="json__value_8cpp" startline="1172" endline="1175">Json::IsIntegral</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab6798954f6e80281cf22708ef45198a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isIntegral</definition>
        <argsstring>() const</argsstring>
        <name>isIntegral</name>
        <qualifiedname>Json::Value::isIntegral</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="269" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1257" bodyend="1274"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="namespace_json_1a1a04cc9d31e64b5912dade003c9b99b5" compoundref="json__value_8cpp" startline="1172" endline="1175">Json::IsIntegral</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a4a2e2a790e19a1c09fc5dd12d7ad47b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isDouble</definition>
        <argsstring>() const</argsstring>
        <name>isDouble</name>
        <qualifiedname>Json::Value::isDouble</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="270" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1276" bodyend="1278"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1af961a000cd203c895e44c195ab39b866" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isNumeric</definition>
        <argsstring>() const</argsstring>
        <name>isNumeric</name>
        <qualifiedname>Json::Value::isNumeric</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="271" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1280" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a71e1f82cf1c3eaf969d400dcffb163a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isString</definition>
        <argsstring>() const</argsstring>
        <name>isString</name>
        <qualifiedname>Json::Value::isString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="272" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1282" bodyend="1282"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a1627eb9d6568d6d0252fa8bb711c0a59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isArray</definition>
        <argsstring>() const</argsstring>
        <name>isArray</name>
        <qualifiedname>Json::Value::isArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="273" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1284" bodyend="1284"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a19b675e40051c107115466cdb15a6164" compoundref="json__writer_8cpp" startline="991" endline="1015">Json::BuiltStyledStreamWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a49e775f9dd2ea653cbf73d1cece15a9e" compoundref="json__writer_8cpp" startline="730" endline="754">Json::StyledStreamWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1a569640292b797b8b42c4c6ef8cf96fd4" compoundref="json__writer_8cpp" startline="516" endline="540">Json::StyledWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_path_1a858f9426f0f7bbe0450644d72b44e26b" compoundref="json__value_8cpp" startline="1514" endline="1528">Json::Path::make</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aba4f8749aab7f02ec17f107e392caf80" compoundref="json__reader_8cpp" startline="929" endline="970">Json::OurReader::parse</referencedby>
        <referencedby refid="class_json_1_1_reader_1ac71ef2b64c7c27b062052e692af3fb32" compoundref="json__reader_8cpp" startline="87" endline="122">Json::Reader::parse</referencedby>
        <referencedby refid="class_json_1_1_path_1ad1abdc54d2e03fc0e9436c3b9fd55a33" compoundref="json__value_8cpp" startline="1475" endline="1494">Json::Path::resolve</referencedby>
        <referencedby refid="class_json_1_1_path_1ab65ab001ccdbc6f8b5f123da58b92539" compoundref="json__value_8cpp" startline="1496" endline="1512">Json::Path::resolve</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a8cf96c0f2a552051fcfc78ffee60e037" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isObject</definition>
        <argsstring>() const</argsstring>
        <name>isObject</name>
        <qualifiedname>Json::Value::isObject</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="274" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1286" bodyend="1286"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a19b675e40051c107115466cdb15a6164" compoundref="json__writer_8cpp" startline="991" endline="1015">Json::BuiltStyledStreamWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a49e775f9dd2ea653cbf73d1cece15a9e" compoundref="json__writer_8cpp" startline="730" endline="754">Json::StyledStreamWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1a569640292b797b8b42c4c6ef8cf96fd4" compoundref="json__writer_8cpp" startline="516" endline="540">Json::StyledWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_path_1a858f9426f0f7bbe0450644d72b44e26b" compoundref="json__value_8cpp" startline="1514" endline="1528">Json::Path::make</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aba4f8749aab7f02ec17f107e392caf80" compoundref="json__reader_8cpp" startline="929" endline="970">Json::OurReader::parse</referencedby>
        <referencedby refid="class_json_1_1_reader_1ac71ef2b64c7c27b062052e692af3fb32" compoundref="json__reader_8cpp" startline="87" endline="122">Json::Reader::parse</referencedby>
        <referencedby refid="class_json_1_1_path_1ad1abdc54d2e03fc0e9436c3b9fd55a33" compoundref="json__value_8cpp" startline="1475" endline="1494">Json::Path::resolve</referencedby>
        <referencedby refid="class_json_1_1_path_1ab65ab001ccdbc6f8b5f123da58b92539" compoundref="json__value_8cpp" startline="1496" endline="1512">Json::Path::resolve</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2fa23b889fd0fa592abe897d648dd561" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Json::Value::as</definition>
        <argsstring>() const =delete</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="276" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aecc195da409eec398cacc5e520ed0fde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Json::Value::is</definition>
        <argsstring>() const =delete</argsstring>
        <name>is</name>
        <qualifiedname>Json::Value::is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="277" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1af1ee6be27a96a7d12128efdd60deb54d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isConvertibleTo</definition>
        <argsstring>(ValueType other) const</argsstring>
        <name>isConvertibleTo</name>
        <qualifiedname>Json::Value::isConvertibleTo</qualifiedname>
        <param>
          <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="279" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="752" bodyend="783"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1aff0180507262a244de61b961178d7443" compoundref="json__value_8cpp" startline="72" endline="75">Json::InRange</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="41">JSON_ASSERT_UNREACHABLE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a0ec2808e1d7efa4e9fad938d6667be44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" kindref="member">ArrayIndex</ref></type>
        <definition>ArrayIndex Json::Value::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>Json::Value::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="281" column="14" bodyfile="src/lib_json/json_value.cpp" bodystart="785" bodyend="806"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="41">JSON_ASSERT_UNREACHABLE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a19b675e40051c107115466cdb15a6164" compoundref="json__writer_8cpp" startline="991" endline="1015">Json::BuiltStyledStreamWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a49e775f9dd2ea653cbf73d1cece15a9e" compoundref="json__writer_8cpp" startline="730" endline="754">Json::StyledStreamWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1a569640292b797b8b42c4c6ef8cf96fd4" compoundref="json__writer_8cpp" startline="516" endline="540">Json::StyledWriter::isMultilineArray</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1acd20e9274bbcf7876ef3af2e7d23a31f" compoundref="json__writer_8cpp" startline="942" endline="989">Json::BuiltStyledStreamWriter::writeArrayValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a606f2ddd58093c9b019d452c1b6f09fe" compoundref="json__writer_8cpp" startline="685" endline="728">Json::StyledStreamWriter::writeArrayValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1a0618c23d62965515def15ece1e677f5d" compoundref="json__writer_8cpp" startline="474" endline="514">Json::StyledWriter::writeArrayValue</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="350" endline="400">Json::FastWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a0519a551e37ee6665d74742b3f96bab3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>Json::Value::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="283" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="808" bodyend="812"/>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a19b675e40051c107115466cdb15a6164" compoundref="json__writer_8cpp" startline="991" endline="1015">Json::BuiltStyledStreamWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a49e775f9dd2ea653cbf73d1cece15a9e" compoundref="json__writer_8cpp" startline="730" endline="754">Json::StyledStreamWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1a569640292b797b8b42c4c6ef8cf96fd4" compoundref="json__writer_8cpp" startline="516" endline="540">Json::StyledWriter::isMultilineArray</referencedby>
        <referencedby refid="class_json_1_1_char_reader_builder_1af890b5cb70e9b372e41de5c9e6535d21" compoundref="json__reader_8cpp" startline="1793" endline="1818">Json::CharReaderBuilder::validate</referencedby>
        <referencedby refid="class_json_1_1_stream_writer_builder_1a12353b97766841db7d049da84658da09" compoundref="json__writer_8cpp" startline="1131" endline="1152">Json::StreamWriterBuilder::validate</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2addc2bcedbd6f8a1eafa49e9adcc729" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <qualifiedname>Json::Value::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="285" column="12" bodyfile="src/lib_json/json_value.cpp" bodystart="814" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>Json::Value::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="287" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="816" bodyend="830"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a7a064d8aa47fde09a268be2aea992134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::resize</definition>
        <argsstring>(ArrayIndex newSize)</argsstring>
        <name>resize</name>
        <qualifiedname>Json::Value::resize</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" kindref="member">ArrayIndex</ref></type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="289" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="832" bodyend="849"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="assertions_8h_1a188941dcc789ccb6539c3d6f41405582" compoundref="assertions_8h" startline="13" endline="18">JSON_ASSERT</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a7d99f5dba388cdaa152ce6ef933d64ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(ArrayIndex index)</argsstring>
        <name>operator[]</name>
        <qualifiedname>Json::Value::operator[]</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="291" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="851" bodyend="865"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac9182982c361e0ab621134d406e5f250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <qualifiedname>Json::Value::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="292" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="867" bodyend="872"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a46607236038b29695ed80c15895271e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::operator[]</definition>
        <argsstring>(ArrayIndex index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>Json::Value::operator[]</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="294" column="15" bodyfile="src/lib_json/json_value.cpp" bodystart="874" bodyend="885"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a0b42557a95621a4676b46a21ffc5e949" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::operator[]</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>Json::Value::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="295" column="15" bodyfile="src/lib_json/json_value.cpp" bodystart="887" bodyend="892"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a034eb7bf85a44fa759bdaa232788ca66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::get</definition>
        <argsstring>(ArrayIndex index, const Value &amp;defaultValue) const</argsstring>
        <name>get</name>
        <qualifiedname>Json::Value::get</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="297" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="997" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac2928f174a6e081c1500c28c2d61ee93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isValidIndex</definition>
        <argsstring>(ArrayIndex index) const</argsstring>
        <name>isValidIndex</name>
        <qualifiedname>Json::Value::isValidIndex</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="299" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1002" bodyend="1002"/>
        <referencedby refid="class_json_1_1_path_1ad1abdc54d2e03fc0e9436c3b9fd55a33" compoundref="json__value_8cpp" startline="1475" endline="1494">Json::Path::resolve</referencedby>
        <referencedby refid="class_json_1_1_path_1ab65ab001ccdbc6f8b5f123da58b92539" compoundref="json__value_8cpp" startline="1496" endline="1512">Json::Path::resolve</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a7e49ac977e4bcf59745a09d426669f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::append</definition>
        <argsstring>(const Value &amp;value)</argsstring>
        <name>append</name>
        <qualifiedname>Json::Value::append</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="301" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="1051" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab723e9957d7b198eb102e8e2afc00e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::append</definition>
        <argsstring>(Value &amp;&amp;value)</argsstring>
        <name>append</name>
        <qualifiedname>Json::Value::append</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="302" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="1053" bodyend="1060"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ae6a26b2112994b3b3149ce109e92072a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::insert</definition>
        <argsstring>(ArrayIndex index, const Value &amp;newValue)</argsstring>
        <name>insert</name>
        <qualifiedname>Json::Value::insert</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="304" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1062" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a61337074536697bae6f5f1642521e1d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::insert</definition>
        <argsstring>(ArrayIndex index, Value &amp;&amp;newValue)</argsstring>
        <name>insert</name>
        <qualifiedname>Json::Value::insert</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;&amp;</type>
          <declname>newValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="305" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1066" bodyend="1078"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1acb912f4ec40a25ea6eb387730885f3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(const char *key)</argsstring>
        <name>operator[]</name>
        <qualifiedname>Json::Value::operator[]</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="307" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="1039" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a1b0498b7b2a520a68137f682d91abdd5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::operator[]</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>Json::Value::operator[]</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="309" column="15" bodyfile="src/lib_json/json_value.cpp" bodystart="1026" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a41c5088e07e80d926ae1c668a60e69cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(const String &amp;key)</argsstring>
        <name>operator[]</name>
        <qualifiedname>Json::Value::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="311" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="1043" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a9fc43585bab16f99838081c48be3b25b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value const  &amp; Json::Value::operator[]</definition>
        <argsstring>(const String &amp;key) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>Json::Value::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="313" column="15" bodyfile="src/lib_json/json_value.cpp" bodystart="1032" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac3763d7d315ca65dc188e273722f7955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::operator[]</definition>
        <argsstring>(const StaticString &amp;key)</argsstring>
        <name>operator[]</name>
        <qualifiedname>Json::Value::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_static_string" kindref="compound">StaticString</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="315" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="1047" bodyend="1049"/>
        <references refid="class_json_1_1_static_string_1af11e3fc5823978e2946f06caa046ac3c" compoundref="value_8h" startline="100" endline="100">Json::StaticString::c_str</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a57de86629ed23246f14014fb6c44fa67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::get</definition>
        <argsstring>(const char *key, const Value &amp;defaultValue) const</argsstring>
        <name>get</name>
        <qualifiedname>Json::Value::get</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="317" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="1085" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aa59ed050e87e1d58d93671a38687f36c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::get</definition>
        <argsstring>(const char *begin, const char *end, const Value &amp;defaultValue) const</argsstring>
        <name>get</name>
        <qualifiedname>Json::Value::get</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="319" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="1080" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a4724d1a523ddc3b6ab84340bcf34dbe4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref></type>
        <definition>Value Json::Value::get</definition>
        <argsstring>(const String &amp;key, const Value &amp;defaultValue) const</argsstring>
        <name>get</name>
        <qualifiedname>Json::Value::get</qualifiedname>
        <param>
          <type>const <ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="322" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="1088" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1afb007b9ce9b2cf9d5f667a07e5e0349f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> const *</type>
        <definition>Value const  * Json::Value::find</definition>
        <argsstring>(char const *begin, char const *end) const</argsstring>
        <name>find</name>
        <qualifiedname>Json::Value::find</qualifiedname>
        <param>
          <type>char const *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="324" column="15" bodyfile="src/lib_json/json_value.cpp" bodystart="1004" bodyend="1016"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a4306acd48f91f491c6fe79221d5d6c77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> const *</type>
        <definition>Value const  * Json::Value::find</definition>
        <argsstring>(const String &amp;key) const</argsstring>
        <name>find</name>
        <qualifiedname>Json::Value::find</qualifiedname>
        <param>
          <type>const <ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="326" column="15" bodyfile="src/lib_json/json_value.cpp" bodystart="1017" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aa7000f461207c415592f564e68ee0271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> *</type>
        <definition>Value * Json::Value::demand</definition>
        <argsstring>(char const *begin, char const *end)</argsstring>
        <name>demand</name>
        <qualifiedname>Json::Value::demand</qualifiedname>
        <param>
          <type>char const *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="328" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="1020" bodyend="1025"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a92e165f04105d27a930fb3a18a053585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::removeMember</definition>
        <argsstring>(const char *key)</argsstring>
        <name>removeMember</name>
        <qualifiedname>Json::Value::removeMember</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="330" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1112" bodyend="1120"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab0af46491e90f4c4030c450cb1f4b920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::removeMember</definition>
        <argsstring>(const String &amp;key)</argsstring>
        <name>removeMember</name>
        <qualifiedname>Json::Value::removeMember</qualifiedname>
        <param>
          <type>const <ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="332" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1121" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a708e599489adf30d65bf85a8ee16e6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::removeMember</definition>
        <argsstring>(const char *key, Value *removed)</argsstring>
        <name>removeMember</name>
        <qualifiedname>Json::Value::removeMember</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>removed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="334" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1106" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a4e6bc39ae749a42a26164cffae600950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::removeMember</definition>
        <argsstring>(String const &amp;key, Value *removed)</argsstring>
        <name>removeMember</name>
        <qualifiedname>Json::Value::removeMember</qualifiedname>
        <param>
          <type><ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>removed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="336" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1109" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a49c91af727d6b4eb0af02a81bb2def87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::removeMember</definition>
        <argsstring>(const char *begin, const char *end, Value *removed)</argsstring>
        <name>removeMember</name>
        <qualifiedname>Json::Value::removeMember</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>removed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="338" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1092" bodyend="1105"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a64160c23c1f2f8b33913364f25d6c58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::removeIndex</definition>
        <argsstring>(ArrayIndex index, Value *removed)</argsstring>
        <name>removeIndex</name>
        <qualifiedname>Json::Value::removeIndex</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" kindref="member">ArrayIndex</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> *</type>
          <declname>removed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="340" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1123" bodyend="1143"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ad6d4df2227321bab05e86667609a7fad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isMember</definition>
        <argsstring>(const char *key) const</argsstring>
        <name>isMember</name>
        <qualifiedname>Json::Value::isMember</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="342" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1149" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2a5dd30c8853545963e4b7ea097cc566" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isMember</definition>
        <argsstring>(const String &amp;key) const</argsstring>
        <name>isMember</name>
        <qualifiedname>Json::Value::isMember</qualifiedname>
        <param>
          <type>const <ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="344" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1152" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2007e1e51f21f44ecf1f13e4a1c567b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isMember</definition>
        <argsstring>(const char *begin, const char *end) const</argsstring>
        <name>isMember</name>
        <qualifiedname>Json::Value::isMember</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="346" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1145" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a79d7725dce6260317333e69022367ac9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a3b47cdb320b208e40f53b4d1c48fbe52" kindref="member">Members</ref></type>
        <definition>Value::Members Json::Value::getMemberNames</definition>
        <argsstring>() const</argsstring>
        <name>getMemberNames</name>
        <qualifiedname>Json::Value::getMemberNames</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="348" column="11" bodyfile="src/lib_json/json_value.cpp" bodystart="1156" bodyend="1170"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a7c9da861861e570a51b45f270c9ff150" compoundref="json__writer_8cpp" startline="880" endline="940">Json::BuiltStyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_fast_writer_1a2ef4a2ce13a341171f01f414f4fdd765" compoundref="json__writer_8cpp" startline="350" endline="400">Json::FastWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a4359250e09273fa0144021684be001ae" compoundref="json__writer_8cpp" startline="626" endline="683">Json::StyledStreamWriter::writeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ac40143cf43f7c4a94d3d0b41e5245069" compoundref="json__writer_8cpp" startline="415" endline="472">Json::StyledWriter::writeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a35dd56303a5993b7786a2861dad9a8c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Json::Value::__declspec</definition>
        <argsstring>(deprecated(&quot;Use setComment(String const&amp;) instead.&quot;)) void setComment(const char *comment</argsstring>
        <name>__declspec</name>
        <qualifiedname>Json::Value::__declspec</qualifiedname>
        <param>
          <type>deprecated(&quot;Use <ref refid="class_json_1_1_value_1a2900152a2887b410a9ddabe278b9d492" kindref="member">setComment</ref>(<ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref> const&amp;) instead.&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="350" column="4"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2900152a2887b410a9ddabe278b9d492" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setComment</definition>
        <argsstring>(const char *comment, size_t len, CommentPlacement placement)</argsstring>
        <name>setComment</name>
        <qualifiedname>Json::Value::setComment</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="355" column="8" bodyfile="include/json/value.h" bodystart="355" bodyend="357"/>
        <referencedby refid="class_json_1_1_our_reader_1ad7318c37469a9106069a236fb4b10e1f" compoundref="json__reader_8cpp" startline="1263" endline="1273">Json::OurReader::addComment</referencedby>
        <referencedby refid="class_json_1_1_reader_1aaea3bd62d12ffb6117a61476c0685049" compoundref="json__reader_8cpp" startline="337" endline="347">Json::Reader::addComment</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aba4f8749aab7f02ec17f107e392caf80" compoundref="json__reader_8cpp" startline="929" endline="970">Json::OurReader::parse</referencedby>
        <referencedby refid="class_json_1_1_reader_1ac71ef2b64c7c27b062052e692af3fb32" compoundref="json__reader_8cpp" startline="87" endline="122">Json::Reader::parse</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" compoundref="json__reader_8cpp" startline="972" endline="1059">Json::OurReader::readValue</referencedby>
        <referencedby refid="class_json_1_1_reader_1a47e56844b803d41ec993a83fadf4495c" compoundref="json__reader_8cpp" startline="124" endline="193">Json::Reader::readValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aeec137a52217bf72e9000d75eef5e46e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setComment</definition>
        <argsstring>(String comment, CommentPlacement placement)</argsstring>
        <name>setComment</name>
        <qualifiedname>Json::Value::setComment</qualifiedname>
        <param>
          <type><ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref></type>
          <declname>comment</declname>
        </param>
        <param>
          <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="359" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1322" bodyend="1330"/>
        <references refid="class_json_1_1_value_1aa71481376285b2f76d558f3ef6967e2a" compoundref="value_8h" startline="431">comments_</references>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="class_json_1_1_value_1a5c7528646aef18a7f70707e0a4bf1afc" compoundref="value_8h" startline="351">placement</references>
        <references refid="class_json_1_1_value_1_1_comments_1a14c896a3c305fd964b0bcad4ec31ec19" compoundref="json__value_8cpp" startline="1314" endline="1320">Json::Value::Comments::set</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a65d8e3ab6a5871cbd019a3e0f0b944a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::hasComment</definition>
        <argsstring>(CommentPlacement placement) const</argsstring>
        <name>hasComment</name>
        <qualifiedname>Json::Value::hasComment</qualifiedname>
        <param>
          <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="360" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1332" bodyend="1334"/>
        <references refid="class_json_1_1_value_1aa71481376285b2f76d558f3ef6967e2a" compoundref="value_8h" startline="431">comments_</references>
        <references refid="class_json_1_1_value_1_1_comments_1a9472048fbb3d4c9f5c2c5567a43528a0" compoundref="json__value_8cpp" startline="1304" endline="1306">Json::Value::Comments::has</references>
        <references refid="class_json_1_1_value_1a5c7528646aef18a7f70707e0a4bf1afc" compoundref="value_8h" startline="351">placement</references>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a457c2f3c1e8c952caeb60e52477d0c9a" compoundref="json__writer_8cpp" startline="1077" endline="1081">Json::BuiltStyledStreamWriter::hasCommentForValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1ad2892f57171919fa4f8a5ae5574755cf" compoundref="json__writer_8cpp" startline="807" endline="811">Json::StyledStreamWriter::hasCommentForValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1a37a806d010f708cb68556f2666f79bdf" compoundref="json__writer_8cpp" startline="601" endline="605">Json::StyledWriter::hasCommentForValue</referencedby>
        <referencedby refid="class_json_1_1_value_1a49ffe98d65426066c4356132af96c87e" compoundref="json__value_8cpp" startline="1348" endline="1356">toStyledString</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" compoundref="json__writer_8cpp" startline="1064" endline="1075">Json::BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1ad2ca860e317ca91d6b2932535b4ce9c7" compoundref="json__writer_8cpp" startline="796" endline="805">Json::StyledStreamWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ab12b274c62822fc51ec4617c6be95139" compoundref="json__writer_8cpp" startline="590" endline="599">Json::StyledWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a32c4afca4e08fba79bb0a80a8010283a" compoundref="json__writer_8cpp" startline="1045" endline="1062">Json::BuiltStyledStreamWriter::writeCommentBeforeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a79c3c2b320475035c47b2db484a3e434" compoundref="json__writer_8cpp" startline="779" endline="794">Json::StyledStreamWriter::writeCommentBeforeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ad3452c48fabf968bf3693549331ec06e" compoundref="json__writer_8cpp" startline="572" endline="588">Json::StyledWriter::writeCommentBeforeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a43a09822e756ba45deff61195a9ba12d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref></type>
        <definition>String Json::Value::getComment</definition>
        <argsstring>(CommentPlacement placement) const</argsstring>
        <name>getComment</name>
        <qualifiedname>Json::Value::getComment</qualifiedname>
        <param>
          <type><ref refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351" kindref="member">CommentPlacement</ref></type>
          <declname>placement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="362" column="10" bodyfile="src/lib_json/json_value.cpp" bodystart="1336" bodyend="1338"/>
        <references refid="class_json_1_1_value_1aa71481376285b2f76d558f3ef6967e2a" compoundref="value_8h" startline="431">comments_</references>
        <references refid="class_json_1_1_value_1_1_comments_1a34b67abb6e65785cc9a71cbdd1aa441d" compoundref="json__value_8cpp" startline="1308" endline="1312">Json::Value::Comments::get</references>
        <references refid="class_json_1_1_value_1a5c7528646aef18a7f70707e0a4bf1afc" compoundref="value_8h" startline="351">placement</references>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a89625b134fce0255263ca40e6125742b" compoundref="json__writer_8cpp" startline="1064" endline="1075">Json::BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1ad2ca860e317ca91d6b2932535b4ce9c7" compoundref="json__writer_8cpp" startline="796" endline="805">Json::StyledStreamWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ab12b274c62822fc51ec4617c6be95139" compoundref="json__writer_8cpp" startline="590" endline="599">Json::StyledWriter::writeCommentAfterValueOnSameLine</referencedby>
        <referencedby refid="struct_json_1_1_built_styled_stream_writer_1a32c4afca4e08fba79bb0a80a8010283a" compoundref="json__writer_8cpp" startline="1045" endline="1062">Json::BuiltStyledStreamWriter::writeCommentBeforeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_stream_writer_1a79c3c2b320475035c47b2db484a3e434" compoundref="json__writer_8cpp" startline="779" endline="794">Json::StyledStreamWriter::writeCommentBeforeValue</referencedby>
        <referencedby refid="class_json_1_1_styled_writer_1ad3452c48fabf968bf3693549331ec06e" compoundref="json__writer_8cpp" startline="572" endline="588">Json::StyledWriter::writeCommentBeforeValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a49ffe98d65426066c4356132af96c87e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref></type>
        <definition>String Json::Value::toStyledString</definition>
        <argsstring>() const</argsstring>
        <name>toStyledString</name>
        <qualifiedname>Json::Value::toStyledString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="364" column="10" bodyfile="src/lib_json/json_value.cpp" bodystart="1348" bodyend="1356"/>
        <references refid="namespace_json_1a4fc417c23905b2ae9e2c47d197a45351a52f1733775460517b2ea6bedf4906d52" compoundref="value_8h" startline="85">Json::commentBefore</references>
        <references refid="class_json_1_1_value_1a65d8e3ab6a5871cbd019a3e0f0b944a3" compoundref="json__value_8cpp" startline="1332" endline="1334">hasComment</references>
        <references refid="namespace_json_1a4cd945e3d7722c3fabc38e14efacb6f8" compoundref="json__writer_8cpp" startline="1168" endline="1173">Json::writeString</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a015459a3950c198d63a2d3be8f5ae296" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a6ebbc5b370efbb09c0973d7a4d7cd936" kindref="member">const_iterator</ref></type>
        <definition>Value::const_iterator Json::Value::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>Json::Value::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="366" column="18" bodyfile="src/lib_json/json_value.cpp" bodystart="1358" bodyend="1369"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="406">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="class_json_1_1_value_1a8ce61157a011894f0252ceed232312de" compoundref="json__value_8cpp" startline="404" endline="406">type</references>
        <references refid="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe">value_</references>
        <referencedby refid="class_json_1_1_char_reader_builder_1af890b5cb70e9b372e41de5c9e6535d21" compoundref="json__reader_8cpp" startline="1793" endline="1818">Json::CharReaderBuilder::validate</referencedby>
        <referencedby refid="class_json_1_1_stream_writer_builder_1a12353b97766841db7d049da84658da09" compoundref="json__writer_8cpp" startline="1131" endline="1152">Json::StreamWriterBuilder::validate</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a3e443cd0ef24f7e028b175e47ee045e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a6ebbc5b370efbb09c0973d7a4d7cd936" kindref="member">const_iterator</ref></type>
        <definition>Value::const_iterator Json::Value::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>Json::Value::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="367" column="18" bodyfile="src/lib_json/json_value.cpp" bodystart="1371" bodyend="1382"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="406">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="class_json_1_1_value_1a8ce61157a011894f0252ceed232312de" compoundref="json__value_8cpp" startline="404" endline="406">type</references>
        <references refid="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe">value_</references>
        <referencedby refid="class_json_1_1_char_reader_builder_1af890b5cb70e9b372e41de5c9e6535d21" compoundref="json__reader_8cpp" startline="1793" endline="1818">Json::CharReaderBuilder::validate</referencedby>
        <referencedby refid="class_json_1_1_stream_writer_builder_1a12353b97766841db7d049da84658da09" compoundref="json__writer_8cpp" startline="1131" endline="1152">Json::StreamWriterBuilder::validate</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2d45bb2e68e8f22fe356d7d955ebd3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a69b2495ee8dc6d62a73b09f85bb00914" kindref="member">iterator</ref></type>
        <definition>Value::iterator Json::Value::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>Json::Value::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="369" column="12" bodyfile="src/lib_json/json_value.cpp" bodystart="1384" bodyend="1395"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="406">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="class_json_1_1_value_1a8ce61157a011894f0252ceed232312de" compoundref="json__value_8cpp" startline="404" endline="406">type</references>
        <references refid="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2f961eff73f7f79cd29260b6cbd42558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value_1a69b2495ee8dc6d62a73b09f85bb00914" kindref="member">iterator</ref></type>
        <definition>Value::iterator Json::Value::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>Json::Value::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="370" column="12" bodyfile="src/lib_json/json_value.cpp" bodystart="1397" bodyend="1408"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="406">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="class_json_1_1_value_1a8ce61157a011894f0252ceed232312de" compoundref="json__value_8cpp" startline="404" endline="406">type</references>
        <references refid="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a43c0f82a856ac66c50fbec6bcaefb395" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <qualifiedname>Json::Value::front</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="372" column="15" bodyfile="include/json/value.h" bodystart="651" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2ba5608dcb192d6e0e165fa0b9ed7d18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <qualifiedname>Json::Value::front</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="374" column="9" bodyfile="include/json/value.h" bodystart="653" bodyend="653"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a9d3773f061ed81d3705ab02dcf1fc8e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>const Value &amp; Json::Value::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <qualifiedname>Json::Value::back</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="376" column="15" bodyfile="include/json/value.h" bodystart="655" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a58fedaf497454f4aa8dbfe1cae04ed94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <qualifiedname>Json::Value::back</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="378" column="9" bodyfile="include/json/value.h" bodystart="657" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a92e32ea0f4f8a15853a3cf0beac9feb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setOffsetStart</definition>
        <argsstring>(ptrdiff_t start)</argsstring>
        <name>setOffsetStart</name>
        <qualifiedname>Json::Value::setOffsetStart</qualifiedname>
        <param>
          <type>ptrdiff_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="380" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1340" bodyend="1340"/>
        <references refid="class_json_1_1_value_1a1c3aeb0fa8fefe93776cb347c76a25a8" compoundref="value_8h" startline="433">start_</references>
        <referencedby refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" compoundref="json__reader_8cpp" startline="1508" endline="1516">Json::OurReader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_reader_1a2420bbb7fd6d5d3e7e2fea894dd8f70f" compoundref="json__reader_8cpp" startline="527" endline="535">Json::Reader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" compoundref="json__reader_8cpp" startline="1439" endline="1447">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_reader_1a442d1f23edf0f4350f5eeab3ee3f7d46" compoundref="json__reader_8cpp" startline="483" endline="491">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" compoundref="json__reader_8cpp" startline="1534" endline="1543">Json::OurReader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_reader_1aaf736937912f5c9b8d221e57f209e3e0" compoundref="json__reader_8cpp" startline="553" endline="562">Json::Reader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a0b9f58faf4212c6ecb5d8e2a1ac10257" compoundref="json__reader_8cpp" startline="1404" endline="1437">Json::OurReader::readArray</referencedby>
        <referencedby refid="class_json_1_1_reader_1afd9a30c0af205c9f327613f486fae6b8" compoundref="json__reader_8cpp" startline="450" endline="481">Json::Reader::readArray</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1aea198f8101dba55099f4d8121a993530" compoundref="json__reader_8cpp" startline="1350" endline="1402">Json::OurReader::readObject</referencedby>
        <referencedby refid="class_json_1_1_reader_1a0068eb3d8e86e91f0e4806f60da66b9c" compoundref="json__reader_8cpp" startline="403" endline="448">Json::Reader::readObject</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" compoundref="json__reader_8cpp" startline="972" endline="1059">Json::OurReader::readValue</referencedby>
        <referencedby refid="class_json_1_1_reader_1a47e56844b803d41ec993a83fadf4495c" compoundref="json__reader_8cpp" startline="124" endline="193">Json::Reader::readValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a5e4f5853fec138150c5df6004a8c2bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setOffsetLimit</definition>
        <argsstring>(ptrdiff_t limit)</argsstring>
        <name>setOffsetLimit</name>
        <qualifiedname>Json::Value::setOffsetLimit</qualifiedname>
        <param>
          <type>ptrdiff_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="381" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="1342" bodyend="1342"/>
        <references refid="class_json_1_1_value_1afe377e25f6d3b5b8ea7221c84f29412a" compoundref="value_8h" startline="434">limit_</references>
        <referencedby refid="class_json_1_1_our_reader_1a1d1c3b44f6720a0e7c39b5ae8de3981c" compoundref="json__reader_8cpp" startline="1508" endline="1516">Json::OurReader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_reader_1a2420bbb7fd6d5d3e7e2fea894dd8f70f" compoundref="json__reader_8cpp" startline="527" endline="535">Json::Reader::decodeDouble</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a272d271290933a89abfd5096dd69c9e9" compoundref="json__reader_8cpp" startline="1439" endline="1447">Json::OurReader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_reader_1a442d1f23edf0f4350f5eeab3ee3f7d46" compoundref="json__reader_8cpp" startline="483" endline="491">Json::Reader::decodeNumber</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a34e31d8b8399b7ad493359702b6de6c9" compoundref="json__reader_8cpp" startline="1534" endline="1543">Json::OurReader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_reader_1aaf736937912f5c9b8d221e57f209e3e0" compoundref="json__reader_8cpp" startline="553" endline="562">Json::Reader::decodeString</referencedby>
        <referencedby refid="class_json_1_1_our_reader_1a1765d9670d191c89a57a22ea5591d35f" compoundref="json__reader_8cpp" startline="972" endline="1059">Json::OurReader::readValue</referencedby>
        <referencedby refid="class_json_1_1_reader_1a47e56844b803d41ec993a83fadf4495c" compoundref="json__reader_8cpp" startline="124" endline="193">Json::Reader::readValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1afa081dc764000951a1d8d6148155508e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ptrdiff_t</type>
        <definition>ptrdiff_t Json::Value::getOffsetStart</definition>
        <argsstring>() const</argsstring>
        <name>getOffsetStart</name>
        <qualifiedname>Json::Value::getOffsetStart</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="382" column="13" bodyfile="src/lib_json/json_value.cpp" bodystart="1344" bodyend="1344"/>
        <references refid="class_json_1_1_value_1a1c3aeb0fa8fefe93776cb347c76a25a8" compoundref="value_8h" startline="433">start_</references>
        <referencedby refid="class_json_1_1_reader_1a3000cb9b1d06a9b502f97000af41a868" compoundref="json__reader_8cpp" startline="761" endline="775">Json::Reader::pushError</referencedby>
        <referencedby refid="class_json_1_1_reader_1af66c5cfdefc672f29e9a2c0c31ed45f7" compoundref="json__reader_8cpp" startline="777" endline="793">Json::Reader::pushError</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a2cdfa01935f87fcace90d450cbd2c0a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ptrdiff_t</type>
        <definition>ptrdiff_t Json::Value::getOffsetLimit</definition>
        <argsstring>() const</argsstring>
        <name>getOffsetLimit</name>
        <qualifiedname>Json::Value::getOffsetLimit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="383" column="13" bodyfile="src/lib_json/json_value.cpp" bodystart="1346" bodyend="1346"/>
        <references refid="class_json_1_1_value_1afe377e25f6d3b5b8ea7221c84f29412a" compoundref="value_8h" startline="434">limit_</references>
        <referencedby refid="class_json_1_1_reader_1a3000cb9b1d06a9b502f97000af41a868" compoundref="json__reader_8cpp" startline="761" endline="775">Json::Reader::pushError</referencedby>
        <referencedby refid="class_json_1_1_reader_1af66c5cfdefc672f29e9a2c0c31ed45f7" compoundref="json__reader_8cpp" startline="777" endline="793">Json::Reader::pushError</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1aad0ee7d782aaa0bd5df15411a6193421" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Json::Value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="437" column="19" bodyfile="include/json/value.h" bodystart="437" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Json::Value::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <qualifiedname>Json::Value::is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="438" column="19" bodyfile="include/json/value.h" bodystart="438" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac91fca4d1eb891f6e0190463bc658196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="class_json_1_1_value_1aae5fc7132fb1d6d53a7ca5aab74cd49c" kindref="member">Int</ref></type>
        <definition>Int Json::Value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="440" column="19" bodyfile="include/json/value.h" bodystart="440" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Json::Value::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <qualifiedname>Json::Value::is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="441" column="19" bodyfile="include/json/value.h" bodystart="441" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a5630ce786a71bf08ffa71f7a8322c3e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" kindref="member">UInt</ref></type>
        <definition>UInt Json::Value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="443" column="19" bodyfile="include/json/value.h" bodystart="443" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Json::Value::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <qualifiedname>Json::Value::is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="444" column="19" bodyfile="include/json/value.h" bodystart="444" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a9df4ec3986ae1a22d6e7bc10187ee56b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="class_json_1_1_value_1ad91a5124c47e054aea3936aeacefcf32" kindref="member">Int64</ref></type>
        <definition>Int64 Json::Value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="447" column="19" bodyfile="include/json/value.h" bodystart="447" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Json::Value::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <qualifiedname>Json::Value::is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="448" column="19" bodyfile="include/json/value.h" bodystart="448" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab901d8ca92d2f98797464eab3b2e6023" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="class_json_1_1_value_1a76faed915871e5b6b8d24e923f7ca6bc" kindref="member">UInt64</ref></type>
        <definition>UInt64 Json::Value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="450" column="19" bodyfile="include/json/value.h" bodystart="450" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Json::Value::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <qualifiedname>Json::Value::is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="451" column="19" bodyfile="include/json/value.h" bodystart="451" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a09c38651140fecfa6657662584b461b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double Json::Value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="454" column="19" bodyfile="include/json/value.h" bodystart="454" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Json::Value::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <qualifiedname>Json::Value::is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="455" column="19" bodyfile="include/json/value.h" bodystart="455" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ace00e8109163adad9e8cec4c368fe828" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespace_json_1ab8386dad87bef4a96620c2f5e860f112" kindref="member">String</ref></type>
        <definition>String Json::Value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="457" column="19" bodyfile="include/json/value.h" bodystart="457" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Json::Value::is</definition>
        <argsstring>() const</argsstring>
        <name>is</name>
        <qualifiedname>Json::Value::is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="458" column="19" bodyfile="include/json/value.h" bodystart="458" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1afc0366cd5ed6a86290f1727175651c98" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float Json::Value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="460" column="19" bodyfile="include/json/value.h" bodystart="460" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a8f47970fd8294cb035db9d31820d3405" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>const char *</type>
        <definition>const char * Json::Value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <qualifiedname>Json::Value::as</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="461" column="25" bodyfile="include/json/value.h" bodystart="461" bodyend="463"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_json_1_1_value_1af50667d7c4dee8e64f350e518ce3b474" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setType</definition>
        <argsstring>(ValueType v)</argsstring>
        <name>setType</name>
        <qualifiedname>Json::Value::setType</qualifiedname>
        <param>
          <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="386" column="8" bodyfile="include/json/value.h" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a7d552fbdbea4dcff62c74553df15544f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Json::Value::isAllocated</definition>
        <argsstring>() const</argsstring>
        <name>isAllocated</name>
        <qualifiedname>Json::Value::isAllocated</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="389" column="8" bodyfile="include/json/value.h" bodystart="389" bodyend="389"/>
        <referencedby refid="class_json_1_1_value_1a13a986e39651853469b6c3ef39898b0a" compoundref="json__value_8cpp" startline="902" endline="932">dupPayload</referencedby>
        <referencedby refid="class_json_1_1_value_1aac6bd14155b88ed2d39ef54820b39e49" compoundref="json__value_8cpp" startline="416" endline="464">operator&lt;</referencedby>
        <referencedby refid="class_json_1_1_value_1a16f9250e30d5c4505cd11137c564a764" compoundref="json__value_8cpp" startline="472" endline="512">operator==</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac3724aa7650e165b220e23c3a279c39a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::setIsAllocated</definition>
        <argsstring>(bool v)</argsstring>
        <name>setIsAllocated</name>
        <qualifiedname>Json::Value::setIsAllocated</qualifiedname>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="390" column="8" bodyfile="include/json/value.h" bodystart="390" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::initBasic</definition>
        <argsstring>(ValueType type, bool allocated=false)</argsstring>
        <name>initBasic</name>
        <qualifiedname>Json::Value::initBasic</qualifiedname>
        <param>
          <type><ref refid="namespace_json_1a7d654b75c16a57007925868e38212b4e" kindref="member">ValueType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allocated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="392" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="894" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a13a986e39651853469b6c3ef39898b0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::dupPayload</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>dupPayload</name>
        <qualifiedname>Json::Value::dupPayload</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="393" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="902" bodyend="932"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1aad8b4982c1acd164f541fba396ac9fb1" compoundref="json__value_8cpp" startline="124" endline="133">Json::decodePrefixedString</references>
        <references refid="namespace_json_1aef6a987788e83e3d123816745b1c3431" compoundref="json__value_8cpp" startline="107" endline="123">Json::duplicateAndPrefixStringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="class_json_1_1_value_1a7d552fbdbea4dcff62c74553df15544f" compoundref="value_8h" startline="389" endline="389">isAllocated</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="41">JSON_ASSERT_UNREACHABLE</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a1e7a5b86d4f52234f55c847ad1ce389a" compoundref="value_8h" startline="406">Json::Value::ValueHolder::map_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="union_json_1_1_value_1_1_value_holder_1a70ac2b153bc405527baa3850d2ddc3cb" compoundref="value_8h" startline="405">Json::Value::ValueHolder::string_</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
        <references refid="class_json_1_1_value_1a8ce61157a011894f0252ceed232312de" compoundref="json__value_8cpp" startline="404" endline="406">type</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
        <references refid="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe">value_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1ac47cca0abfc24071b1c5caa98d752862" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::releasePayload</definition>
        <argsstring>()</argsstring>
        <name>releasePayload</name>
        <qualifiedname>Json::Value::releasePayload</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="394" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="934" bodyend="953"/>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eadc8f264f36b55b063c78126b335415f4" compoundref="value_8h" startline="80">Json::arrayValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea14c30dbf4da86f7b809be299f671f7fd" compoundref="value_8h" startline="79">Json::booleanValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae5a9d708d5c9e23ae9bf98898522512d" compoundref="value_8h" startline="75">Json::intValue</references>
        <references refid="json__value_8cpp_1aa5e619e3e9388f6376a344dd8462c9cc" compoundref="json__value_8cpp" startline="41">JSON_ASSERT_UNREACHABLE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eab837c7b869c14d8be712deb45c9e490e" compoundref="value_8h" startline="77">Json::realValue</references>
        <references refid="namespace_json_1a48f4e3ea655e3b4a5d7f892c81f00511" compoundref="json__value_8cpp" startline="149" endline="149">Json::releasePrefixedStringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea804ef857affea2d415843c73f261c258" compoundref="value_8h" startline="78">Json::stringValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eaea788d9a3bb00adc6d68d97d43e1ccd3" compoundref="value_8h" startline="76">Json::uintValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a0a277596eda744a8d1ffb6dec43b8627" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Json::Value::dupMeta</definition>
        <argsstring>(const Value &amp;other)</argsstring>
        <name>dupMeta</name>
        <qualifiedname>Json::Value::dupMeta</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="395" column="8" bodyfile="src/lib_json/json_value.cpp" bodystart="955" bodyend="959"/>
        <references refid="class_json_1_1_value_1aa71481376285b2f76d558f3ef6967e2a" compoundref="value_8h" startline="431">comments_</references>
        <references refid="class_json_1_1_value_1afe377e25f6d3b5b8ea7221c84f29412a" compoundref="value_8h" startline="434">limit_</references>
        <references refid="class_json_1_1_value_1a1c3aeb0fa8fefe93776cb347c76a25a8" compoundref="value_8h" startline="433">start_</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::resolveReference</definition>
        <argsstring>(const char *key)</argsstring>
        <name>resolveReference</name>
        <qualifiedname>Json::Value::resolveReference</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="397" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="961" bodyend="977"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_value_1a5f6b3aaf4f2e952a33dd823db008c333" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_json_1_1_value" kindref="compound">Value</ref> &amp;</type>
        <definition>Value &amp; Json::Value::resolveReference</definition>
        <argsstring>(const char *key, const char *end)</argsstring>
        <name>resolveReference</name>
        <qualifiedname>Json::Value::resolveReference</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/value.h" line="398" column="9" bodyfile="src/lib_json/json_value.cpp" bodystart="979" bodyend="995"/>
        <references refid="assertions_8h_1ad7facdeeca0f495765e3b204c265eadb" compoundref="assertions_8h" startline="42" endline="47">JSON_ASSERT_MESSAGE</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4ea7d9899633b4409bd3fc107e6737f8391" compoundref="value_8h" startline="74">Json::nullValue</references>
        <references refid="namespace_json_1a7d654b75c16a57007925868e38212b4eae8386dcfc36d1ae897745f7b4f77a1f6" compoundref="value_8h" startline="81">Json::objectValue</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="9">
        <label>CommentPlacement</label>
      </node>
      <node id="11">
        <label>LargestInt</label>
      </node>
      <node id="12">
        <label>LargestUInt</label>
      </node>
      <node id="1">
        <label>Json::Value</label>
        <link refid="class_json_1_1_value"/>
        <childnode refid="1" relation="usage">
          <edgelabel>null</edgelabel>
          <edgelabel>nullRef</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>maxLargestInt</edgelabel>
          <edgelabel>minLargestInt</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>maxLargestUInt</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>maxInt</edgelabel>
          <edgelabel>minInt</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>allocated_</edgelabel>
          <edgelabel>defaultRealPrecision</edgelabel>
          <edgelabel>maxUInt</edgelabel>
          <edgelabel>value_type_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>maxInt64</edgelabel>
          <edgelabel>minInt64</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>maxUInt64</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>maxUInt64AsDouble</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>placement</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>value_</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>bits_</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>comments_</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>limit_</edgelabel>
          <edgelabel>start_</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>Json::Value::Comments</label>
        <link refid="class_json_1_1_value_1_1_comments"/>
        <childnode refid="19" relation="usage">
          <edgelabel>ptr_</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>Json::Value::ValueHolder</label>
        <link refid="union_json_1_1_value_1_1_value_holder"/>
        <childnode refid="11" relation="usage">
          <edgelabel>int_</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>uint_</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>real_</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>bool_</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>string_</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>map_</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>ObjectValues *</label>
      </node>
      <node id="21">
        <label>T</label>
      </node>
      <node id="17">
        <label>anonymous:bits_</label>
      </node>
      <node id="14">
        <label>bool</label>
      </node>
      <node id="15">
        <label>char *</label>
      </node>
      <node id="13">
        <label>double</label>
      </node>
      <node id="23">
        <label>ptrdiff_t</label>
      </node>
      <node id="4">
        <label>static constexpr Int</label>
      </node>
      <node id="6">
        <label>static constexpr Int64</label>
      </node>
      <node id="2">
        <label>static constexpr LargestInt</label>
      </node>
      <node id="3">
        <label>static constexpr LargestUInt</label>
      </node>
      <node id="7">
        <label>static constexpr UInt64</label>
      </node>
      <node id="8">
        <label>static constexpr double</label>
      </node>
      <node id="20">
        <label>std::array&lt; T &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::unique_ptr&lt; T &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>std::unique_ptr&lt; Array &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; Array &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>unsigned int</label>
      </node>
    </collaborationgraph>
    <location file="include/json/value.h" line="106" column="1" bodyfile="include/json/value.h" bodystart="106" bodyend="435"/>
    <listofallmembers>
      <member refid="class_json_1_1_value_1a35dd56303a5993b7786a2861dad9a8c8" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>__declspec</name></member>
      <member refid="class_json_1_1_value_1ae0126c80dc4907aad94088553fc7632b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>allocated_</name></member>
      <member refid="class_json_1_1_value_1a7e49ac977e4bcf59745a09d426669f75" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>append</name></member>
      <member refid="class_json_1_1_value_1ab723e9957d7b198eb102e8e2afc00e3a" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>append</name></member>
      <member refid="class_json_1_1_value_1a0cfec5b9bac611047dacc56d691a4435" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>ArrayIndex</name></member>
      <member refid="class_json_1_1_value_1a2fa23b889fd0fa592abe897d648dd561" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1aad0ee7d782aaa0bd5df15411a6193421" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1ac91fca4d1eb891f6e0190463bc658196" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1a5630ce786a71bf08ffa71f7a8322c3e1" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1a9df4ec3986ae1a22d6e7bc10187ee56b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1ab901d8ca92d2f98797464eab3b2e6023" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1a09c38651140fecfa6657662584b461b5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1ace00e8109163adad9e8cec4c368fe828" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1afc0366cd5ed6a86290f1727175651c98" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1a8f47970fd8294cb035db9d31820d3405" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>as</name></member>
      <member refid="class_json_1_1_value_1ab693fb7b9b1595bb0adc49658bbf780d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asBool</name></member>
      <member refid="class_json_1_1_value_1a16668c8db7ef0a5de040012f0dfd84b0" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asCString</name></member>
      <member refid="class_json_1_1_value_1afd24002a18aef907ad746b1cb9eda0a2" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asDouble</name></member>
      <member refid="class_json_1_1_value_1af3a4d10bf575fabdc5440a7135c9649c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asFloat</name></member>
      <member refid="class_json_1_1_value_1a614d635bc248a592593feb322cd15ab8" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asInt</name></member>
      <member refid="class_json_1_1_value_1aa647ac4fe51a2e325c063ebe32262b44" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asInt64</name></member>
      <member refid="class_json_1_1_value_1ab16f2ea2a117a1b3b576acab8b6a700d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asLargestInt</name></member>
      <member refid="class_json_1_1_value_1ad03548101e0bf3d2d9eac75c64a0b8d7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asLargestUInt</name></member>
      <member refid="class_json_1_1_value_1a52207c8d4e86160f968a40817cb2529b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asString</name></member>
      <member refid="class_json_1_1_value_1a74b305583ec3aacf4f9dd06e799dc265" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asUInt</name></member>
      <member refid="class_json_1_1_value_1a0e44a5a4cd0c099f9570dfa25813eb60" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>asUInt64</name></member>
      <member refid="class_json_1_1_value_1a9d3773f061ed81d3705ab02dcf1fc8e1" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>back</name></member>
      <member refid="class_json_1_1_value_1a58fedaf497454f4aa8dbfe1cae04ed94" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>back</name></member>
      <member refid="class_json_1_1_value_1a015459a3950c198d63a2d3be8f5ae296" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>begin</name></member>
      <member refid="class_json_1_1_value_1a2d45bb2e68e8f22fe356d7d955ebd3c9" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>begin</name></member>
      <member refid="class_json_1_1_value_1a22acc144a228b4e789cf194e0a0fca25" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>bits_</name></member>
      <member refid="class_json_1_1_value_1a501a4d67e6c875255c2ecc03ccd2019b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>clear</name></member>
      <member refid="class_json_1_1_value_1aa71481376285b2f76d558f3ef6967e2a" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>comments_</name></member>
      <member refid="class_json_1_1_value_1aefa4464ca1bb0bcc9a87b38ed62ca2e0" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>compare</name></member>
      <member refid="class_json_1_1_value_1a6ebbc5b370efbb09c0973d7a4d7cd936" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>const_iterator</name></member>
      <member refid="class_json_1_1_value_1a1b2c6379664d91b9f1bcd4d1853e5970" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>copy</name></member>
      <member refid="class_json_1_1_value_1ab504d299cfaa440392037fa8a3c54064" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>copyPayload</name></member>
      <member refid="class_json_1_1_value_1a66b0728adfe54e8f7652a180b21a2812" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>defaultRealPrecision</name></member>
      <member refid="class_json_1_1_value_1aa7000f461207c415592f564e68ee0271" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>demand</name></member>
      <member refid="class_json_1_1_value_1a0a277596eda744a8d1ffb6dec43b8627" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>dupMeta</name></member>
      <member refid="class_json_1_1_value_1a13a986e39651853469b6c3ef39898b0a" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>dupPayload</name></member>
      <member refid="class_json_1_1_value_1a0519a551e37ee6665d74742b3f96bab3" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>empty</name></member>
      <member refid="class_json_1_1_value_1a3e443cd0ef24f7e028b175e47ee045e0" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>end</name></member>
      <member refid="class_json_1_1_value_1a2f961eff73f7f79cd29260b6cbd42558" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>end</name></member>
      <member refid="class_json_1_1_value_1afb007b9ce9b2cf9d5f667a07e5e0349f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>find</name></member>
      <member refid="class_json_1_1_value_1a4306acd48f91f491c6fe79221d5d6c77" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>find</name></member>
      <member refid="class_json_1_1_value_1a43c0f82a856ac66c50fbec6bcaefb395" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>front</name></member>
      <member refid="class_json_1_1_value_1a2ba5608dcb192d6e0e165fa0b9ed7d18" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>front</name></member>
      <member refid="class_json_1_1_value_1a034eb7bf85a44fa759bdaa232788ca66" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>get</name></member>
      <member refid="class_json_1_1_value_1a57de86629ed23246f14014fb6c44fa67" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>get</name></member>
      <member refid="class_json_1_1_value_1aa59ed050e87e1d58d93671a38687f36c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>get</name></member>
      <member refid="class_json_1_1_value_1a4724d1a523ddc3b6ab84340bcf34dbe4" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>get</name></member>
      <member refid="class_json_1_1_value_1a43a09822e756ba45deff61195a9ba12d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getComment</name></member>
      <member refid="class_json_1_1_value_1a79d7725dce6260317333e69022367ac9" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getMemberNames</name></member>
      <member refid="class_json_1_1_value_1a2cdfa01935f87fcace90d450cbd2c0a4" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getOffsetLimit</name></member>
      <member refid="class_json_1_1_value_1afa081dc764000951a1d8d6148155508e" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getOffsetStart</name></member>
      <member refid="class_json_1_1_value_1a2e1b7be6bde2fe23f15290d9ddbbdf8a" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>getString</name></member>
      <member refid="class_json_1_1_value_1a65d8e3ab6a5871cbd019a3e0f0b944a3" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>hasComment</name></member>
      <member refid="class_json_1_1_value_1a32b86b71564157f40f880f5736be822a" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>initBasic</name></member>
      <member refid="class_json_1_1_value_1ae6a26b2112994b3b3149ce109e92072a" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>insert</name></member>
      <member refid="class_json_1_1_value_1a61337074536697bae6f5f1642521e1d1" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>insert</name></member>
      <member refid="class_json_1_1_value_1aae5fc7132fb1d6d53a7ca5aab74cd49c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Int</name></member>
      <member refid="class_json_1_1_value_1ad91a5124c47e054aea3936aeacefcf32" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Int64</name></member>
      <member refid="class_json_1_1_value_1aecc195da409eec398cacc5e520ed0fde" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>is</name></member>
      <member refid="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>is</name></member>
      <member refid="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>is</name></member>
      <member refid="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>is</name></member>
      <member refid="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>is</name></member>
      <member refid="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>is</name></member>
      <member refid="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>is</name></member>
      <member refid="class_json_1_1_value_1ab113315e14a4f2579f32f2d30b0eda21" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>is</name></member>
      <member refid="class_json_1_1_value_1a7d552fbdbea4dcff62c74553df15544f" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>isAllocated</name></member>
      <member refid="class_json_1_1_value_1a1627eb9d6568d6d0252fa8bb711c0a59" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isArray</name></member>
      <member refid="class_json_1_1_value_1ab1f02651cb89d0f18b63a036959391ba" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isBool</name></member>
      <member refid="class_json_1_1_value_1af1ee6be27a96a7d12128efdd60deb54d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isConvertibleTo</name></member>
      <member refid="class_json_1_1_value_1a4a2e2a790e19a1c09fc5dd12d7ad47b5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isDouble</name></member>
      <member refid="class_json_1_1_value_1aff51d8b52979ca06cf9d909accd5f695" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isInt</name></member>
      <member refid="class_json_1_1_value_1a4a81fb3c3acdbb68b2e2f30836a4f53e" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isInt64</name></member>
      <member refid="class_json_1_1_value_1ab6798954f6e80281cf22708ef45198a7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isIntegral</name></member>
      <member refid="class_json_1_1_value_1ad6d4df2227321bab05e86667609a7fad" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isMember</name></member>
      <member refid="class_json_1_1_value_1a2a5dd30c8853545963e4b7ea097cc566" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isMember</name></member>
      <member refid="class_json_1_1_value_1a2007e1e51f21f44ecf1f13e4a1c567b9" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isMember</name></member>
      <member refid="class_json_1_1_value_1abde4070e21e46dc4f8203f66582cb19f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isNull</name></member>
      <member refid="class_json_1_1_value_1af961a000cd203c895e44c195ab39b866" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isNumeric</name></member>
      <member refid="class_json_1_1_value_1a8cf96c0f2a552051fcfc78ffee60e037" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isObject</name></member>
      <member refid="class_json_1_1_value_1a71e1f82cf1c3eaf969d400dcffb163a6" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isString</name></member>
      <member refid="class_json_1_1_value_1abdda463d3269015f883587349726cfbc" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isUInt</name></member>
      <member refid="class_json_1_1_value_1a883576e35cb03a785258edb56777a2de" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isUInt64</name></member>
      <member refid="class_json_1_1_value_1ac2928f174a6e081c1500c28c2d61ee93" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>isValidIndex</name></member>
      <member refid="class_json_1_1_value_1a69b2495ee8dc6d62a73b09f85bb00914" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>iterator</name></member>
      <member refid="class_json_1_1_value_1a6ce811c4ceb845590426eee1ac95fc99" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>LargestInt</name></member>
      <member refid="class_json_1_1_value_1a6e5a59766fcd42192dd0a46c13a9a55b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>LargestUInt</name></member>
      <member refid="class_json_1_1_value_1afe377e25f6d3b5b8ea7221c84f29412a" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>limit_</name></member>
      <member refid="class_json_1_1_value_1ab6042b06093ce9871db116aa8b8e9c90" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxInt</name></member>
      <member refid="class_json_1_1_value_1a1a1fcb7db5fa9fafc1c8357765213975" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxInt64</name></member>
      <member refid="class_json_1_1_value_1a08a915ca68917f2ae15b5921747441db" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxLargestInt</name></member>
      <member refid="class_json_1_1_value_1abe4fdaa8d0e044fb84d31d88a095f8a8" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxLargestUInt</name></member>
      <member refid="class_json_1_1_value_1afed7d67975ffa7852d02f245c280a6b7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxUInt</name></member>
      <member refid="class_json_1_1_value_1ade2162cbad414f7770d31c88664f62e4" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxUInt64</name></member>
      <member refid="class_json_1_1_value_1a38a9ec974d3938d49b84db915489b76a" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>maxUInt64AsDouble</name></member>
      <member refid="class_json_1_1_value_1a3b47cdb320b208e40f53b4d1c48fbe52" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Members</name></member>
      <member refid="class_json_1_1_value_1adf754fa3bfc9897ac4b5158039b25d9f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>minInt</name></member>
      <member refid="class_json_1_1_value_1ae6e1b822e2516c49e79782fe50b70a5f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>minInt64</name></member>
      <member refid="class_json_1_1_value_1af022bf2313a004f1f566ea7a6e24b660" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>minLargestInt</name></member>
      <member refid="class_json_1_1_value_1a21ddb05b92c60c7548e928bf371e7d45" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>null</name></member>
      <member refid="class_json_1_1_value_1aaee27e622f87266f861216d644603730" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>nullRef</name></member>
      <member refid="class_json_1_1_value_1af2f124567acc35d021a424e53ebdfcab" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>nullSingleton</name></member>
      <member refid="class_json_1_1_value_1a2addc2bcedbd6f8a1eafa49e9adcc729" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator bool</name></member>
      <member refid="class_json_1_1_value_1a86e95be072e515c48abc61dec63a1689" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator!=</name></member>
      <member refid="class_json_1_1_value_1aac6bd14155b88ed2d39ef54820b39e49" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator&lt;</name></member>
      <member refid="class_json_1_1_value_1a40c411a320a416d5eac0052b36211286" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator&lt;=</name></member>
      <member refid="class_json_1_1_value_1ade21ab9710b64fee954b5fcceb0d37dd" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator=</name></member>
      <member refid="class_json_1_1_value_1a000d796a5fc0c29162b63617dc4a697c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator=</name></member>
      <member refid="class_json_1_1_value_1a16f9250e30d5c4505cd11137c564a764" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator==</name></member>
      <member refid="class_json_1_1_value_1a4646c2f0764908c0972160c7c2ebe567" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator&gt;</name></member>
      <member refid="class_json_1_1_value_1afe2c3e52df60b9622cbd8358b74bdbf5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator&gt;=</name></member>
      <member refid="class_json_1_1_value_1a7d99f5dba388cdaa152ce6ef933d64ef" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1ac9182982c361e0ab621134d406e5f250" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1a46607236038b29695ed80c15895271e4" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1a0b42557a95621a4676b46a21ffc5e949" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1acb912f4ec40a25ea6eb387730885f3d9" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1a1b0498b7b2a520a68137f682d91abdd5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1a41c5088e07e80d926ae1c668a60e69cf" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1a9fc43585bab16f99838081c48be3b25b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1ac3763d7d315ca65dc188e273722f7955" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>operator[]</name></member>
      <member refid="class_json_1_1_value_1a5c7528646aef18a7f70707e0a4bf1afc" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>placement</name></member>
      <member refid="class_json_1_1_value_1ac47cca0abfc24071b1c5caa98d752862" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>releasePayload</name></member>
      <member refid="class_json_1_1_value_1a64160c23c1f2f8b33913364f25d6c58d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeIndex</name></member>
      <member refid="class_json_1_1_value_1a92e165f04105d27a930fb3a18a053585" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1ab0af46491e90f4c4030c450cb1f4b920" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1a708e599489adf30d65bf85a8ee16e6fb" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1a4e6bc39ae749a42a26164cffae600950" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1a49c91af727d6b4eb0af02a81bb2def87" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>removeMember</name></member>
      <member refid="class_json_1_1_value_1a7a064d8aa47fde09a268be2aea992134" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>resize</name></member>
      <member refid="class_json_1_1_value_1a9ff9cdae2c8f4155bab603d750b0b3f1" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>resolveReference</name></member>
      <member refid="class_json_1_1_value_1a5f6b3aaf4f2e952a33dd823db008c333" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>resolveReference</name></member>
      <member refid="class_json_1_1_value_1a2900152a2887b410a9ddabe278b9d492" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>setComment</name></member>
      <member refid="class_json_1_1_value_1aeec137a52217bf72e9000d75eef5e46e" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>setComment</name></member>
      <member refid="class_json_1_1_value_1ac3724aa7650e165b220e23c3a279c39a" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>setIsAllocated</name></member>
      <member refid="class_json_1_1_value_1a5e4f5853fec138150c5df6004a8c2bcf" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>setOffsetLimit</name></member>
      <member refid="class_json_1_1_value_1a92e32ea0f4f8a15853a3cf0beac9feb9" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>setOffsetStart</name></member>
      <member refid="class_json_1_1_value_1af50667d7c4dee8e64f350e518ce3b474" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>setType</name></member>
      <member refid="class_json_1_1_value_1a0ec2808e1d7efa4e9fad938d6667be44" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>size</name></member>
      <member refid="class_json_1_1_value_1a1c3aeb0fa8fefe93776cb347c76a25a8" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>start_</name></member>
      <member refid="class_json_1_1_value_1aab841120d78e296e1bc06a373345e822" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>swap</name></member>
      <member refid="class_json_1_1_value_1a5263476047f20e2fc6de470e4de34fe5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>swapPayload</name></member>
      <member refid="class_json_1_1_value_1a49ffe98d65426066c4356132af96c87e" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>toStyledString</name></member>
      <member refid="class_json_1_1_value_1a8ce61157a011894f0252ceed232312de" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>type</name></member>
      <member refid="class_json_1_1_value_1a10794060631f3e5f895739cfd2cc98b2" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>UInt</name></member>
      <member refid="class_json_1_1_value_1a76faed915871e5b6b8d24e923f7ca6bc" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>UInt64</name></member>
      <member refid="class_json_1_1_value_1ada6ba1369448fb0240bccc36efaa46f7" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a4744ae571fcf34f4b16a2257b3b3b585" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1ae67a857b01286e3499a87e95be848d20" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1ab1cdc3d9a4d4cc03fa01439d43ceb1b5" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a8adda58d5ae17bf7ca6a53bab4a7b69c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a32228cc84d83200cca8441451997996c" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1ad87b849356816aca75995dd07302e49d" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a39fa09d1902efbd4350e1236db920571" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a081830e95f88a37054da7e46c65b0766" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a0ee1ff8974f050b80308a2dc580b8867" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a350a31ea4a30d384994b0bc010b17495" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a08a632cc1a237067431cff954866121f" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a436dfd3670f95fd665f680eba5cebcf0" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1adace4216e0f5b3be7f855adebae6aa0b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>Value</name></member>
      <member refid="class_json_1_1_value_1a692277d820a4750e01354e16a465ecfe" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>value_</name></member>
      <member refid="class_json_1_1_value_1aebfc8cf55af7fc6101100c13f865d362" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>value_type</name></member>
      <member refid="class_json_1_1_value_1acd89c088d71de91e9f999d17a249df45" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>value_type_</name></member>
      <member refid="class_json_1_1_value_1ad016df56489e5d360735457afba2f649" prot="private" virt="non-virtual"><scope>Json::Value</scope><name>ValueIteratorBase</name></member>
      <member refid="class_json_1_1_value_1a287dea48da3912d02756735bf677b27b" prot="public" virt="non-virtual"><scope>Json::Value</scope><name>~Value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
