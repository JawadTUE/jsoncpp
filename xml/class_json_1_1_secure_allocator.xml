<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="class_json_1_1_secure_allocator" kind="class" language="C++" prot="public">
    <compoundname>Json::SecureAllocator</compoundname>
    <includes refid="allocator_8h" local="no">allocator.h</includes>
    <innerclass refid="struct_json_1_1_secure_allocator_1_1rebind" prot="public">Json::SecureAllocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_json_1_1_secure_allocator_1ae45a020fc6d6f3ae66394c81c4281ad8" prot="public" static="no">
        <type>T</type>
        <definition>using Json::SecureAllocator&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>Json::SecureAllocator::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="14" column="3" bodyfile="include/json/allocator.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_secure_allocator_1a442c09b3267622d23416d9072ea1afe9" prot="public" static="no">
        <type>T *</type>
        <definition>using Json::SecureAllocator&lt; T &gt;::pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>Json::SecureAllocator::pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="15" column="3" bodyfile="include/json/allocator.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_secure_allocator_1a464b356817c78ea996cd3a7403f7e735" prot="public" static="no">
        <type>const T *</type>
        <definition>using Json::SecureAllocator&lt; T &gt;::const_pointer =  const T*</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <qualifiedname>Json::SecureAllocator::const_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="16" column="3" bodyfile="include/json/allocator.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_secure_allocator_1a55b243c56812b3852b59c1a9b0a21c65" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using Json::SecureAllocator&lt; T &gt;::reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>Json::SecureAllocator::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="17" column="3" bodyfile="include/json/allocator.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_secure_allocator_1a3f0327d609dcd1942c8c7fa4d4f227e5" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>using Json::SecureAllocator&lt; T &gt;::const_reference =  const T&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <qualifiedname>Json::SecureAllocator::const_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="18" column="3" bodyfile="include/json/allocator.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_secure_allocator_1a61c258f0ae80af6982fae200b55a4dc9" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using Json::SecureAllocator&lt; T &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>Json::SecureAllocator::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="19" column="3" bodyfile="include/json/allocator.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_json_1_1_secure_allocator_1a404f41a8e340a8af1b54138920a6ef33" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using Json::SecureAllocator&lt; T &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>Json::SecureAllocator::difference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="20" column="3" bodyfile="include/json/allocator.h" bodystart="20" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_json_1_1_secure_allocator_1a9b7d7180b360ebd673bdcfab25c1d5a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_json_1_1_secure_allocator_1a442c09b3267622d23416d9072ea1afe9" kindref="member">pointer</ref></type>
        <definition>pointer Json::SecureAllocator&lt; T &gt;::allocate</definition>
        <argsstring>(size_type n)</argsstring>
        <name>allocate</name>
        <qualifiedname>Json::SecureAllocator::allocate</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_secure_allocator_1a61c258f0ae80af6982fae200b55a4dc9" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="22" column="11" bodyfile="include/json/allocator.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_secure_allocator_1a886d46522b21826939ef055f69deeb78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Json::SecureAllocator&lt; T &gt;::deallocate</definition>
        <argsstring>(pointer p, size_type n)</argsstring>
        <name>deallocate</name>
        <qualifiedname>Json::SecureAllocator::deallocate</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_secure_allocator_1a442c09b3267622d23416d9072ea1afe9" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_json_1_1_secure_allocator_1a61c258f0ae80af6982fae200b55a4dc9" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="26" column="8" bodyfile="include/json/allocator.h" bodystart="26" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_secure_allocator_1acd466192ba41ea5468bd2f45ae9de9fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Json::SecureAllocator&lt; T &gt;::construct</definition>
        <argsstring>(pointer p, Args &amp;&amp;... args)</argsstring>
        <name>construct</name>
        <qualifiedname>Json::SecureAllocator::construct</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_secure_allocator_1a442c09b3267622d23416d9072ea1afe9" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="38" column="20" bodyfile="include/json/allocator.h" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_secure_allocator_1a1ca352414d0ce358c0dca70fb26c674c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_json_1_1_secure_allocator_1a61c258f0ae80af6982fae200b55a4dc9" kindref="member">size_type</ref></type>
        <definition>size_type Json::SecureAllocator&lt; T &gt;::max_size</definition>
        <argsstring>() const</argsstring>
        <name>max_size</name>
        <qualifiedname>Json::SecureAllocator::max_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="42" column="13" bodyfile="include/json/allocator.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_secure_allocator_1a2f26b3dbf3cfffcc376844fb19733422" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_json_1_1_secure_allocator_1a442c09b3267622d23416d9072ea1afe9" kindref="member">pointer</ref></type>
        <definition>pointer Json::SecureAllocator&lt; T &gt;::address</definition>
        <argsstring>(reference x) const</argsstring>
        <name>address</name>
        <qualifiedname>Json::SecureAllocator::address</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_secure_allocator_1a55b243c56812b3852b59c1a9b0a21c65" kindref="member">reference</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="44" column="11" bodyfile="include/json/allocator.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_secure_allocator_1a228944048dd7266f219b52fd1958b4d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_json_1_1_secure_allocator_1a464b356817c78ea996cd3a7403f7e735" kindref="member">const_pointer</ref></type>
        <definition>const_pointer Json::SecureAllocator&lt; T &gt;::address</definition>
        <argsstring>(const_reference x) const</argsstring>
        <name>address</name>
        <qualifiedname>Json::SecureAllocator::address</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_secure_allocator_1a3f0327d609dcd1942c8c7fa4d4f227e5" kindref="member">const_reference</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="46" column="17" bodyfile="include/json/allocator.h" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_secure_allocator_1a7316f4efeb3b992c69c94e345ac9f5cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Json::SecureAllocator&lt; T &gt;::destroy</definition>
        <argsstring>(pointer p)</argsstring>
        <name>destroy</name>
        <qualifiedname>Json::SecureAllocator::destroy</qualifiedname>
        <param>
          <type><ref refid="class_json_1_1_secure_allocator_1a442c09b3267622d23416d9072ea1afe9" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="48" column="8" bodyfile="include/json/allocator.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_secure_allocator_1aac964c7467309331882c1ad541e4d8e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Json::SecureAllocator&lt; T &gt;::SecureAllocator</definition>
        <argsstring>()</argsstring>
        <name>SecureAllocator</name>
        <qualifiedname>Json::SecureAllocator::SecureAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="50" column="3" bodyfile="include/json/allocator.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_json_1_1_secure_allocator_1afefbe83997eb1da2089229771957e6bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Json::SecureAllocator&lt; T &gt;::SecureAllocator</definition>
        <argsstring>(const SecureAllocator&lt; U &gt; &amp;)</argsstring>
        <name>SecureAllocator</name>
        <qualifiedname>Json::SecureAllocator::SecureAllocator</qualifiedname>
        <param>
          <type>const <ref refid="class_json_1_1_secure_allocator" kindref="compound">SecureAllocator</ref>&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/json/allocator.h" line="51" column="15" bodyfile="include/json/allocator.h" bodystart="51" bodyend="51"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/json/allocator.h" line="12" column="12" bodyfile="include/json/allocator.h" bodystart="12" bodyend="55"/>
    <listofallmembers>
      <member refid="class_json_1_1_secure_allocator_1a2f26b3dbf3cfffcc376844fb19733422" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>address</name></member>
      <member refid="class_json_1_1_secure_allocator_1a228944048dd7266f219b52fd1958b4d5" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>address</name></member>
      <member refid="class_json_1_1_secure_allocator_1a9b7d7180b360ebd673bdcfab25c1d5a4" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>allocate</name></member>
      <member refid="class_json_1_1_secure_allocator_1a464b356817c78ea996cd3a7403f7e735" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>const_pointer</name></member>
      <member refid="class_json_1_1_secure_allocator_1a3f0327d609dcd1942c8c7fa4d4f227e5" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>const_reference</name></member>
      <member refid="class_json_1_1_secure_allocator_1acd466192ba41ea5468bd2f45ae9de9fb" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>construct</name></member>
      <member refid="class_json_1_1_secure_allocator_1a886d46522b21826939ef055f69deeb78" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>deallocate</name></member>
      <member refid="class_json_1_1_secure_allocator_1a7316f4efeb3b992c69c94e345ac9f5cd" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>destroy</name></member>
      <member refid="class_json_1_1_secure_allocator_1a404f41a8e340a8af1b54138920a6ef33" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>difference_type</name></member>
      <member refid="class_json_1_1_secure_allocator_1a1ca352414d0ce358c0dca70fb26c674c" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>max_size</name></member>
      <member refid="class_json_1_1_secure_allocator_1a442c09b3267622d23416d9072ea1afe9" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>pointer</name></member>
      <member refid="class_json_1_1_secure_allocator_1a55b243c56812b3852b59c1a9b0a21c65" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>reference</name></member>
      <member refid="class_json_1_1_secure_allocator_1aac964c7467309331882c1ad541e4d8e4" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>SecureAllocator</name></member>
      <member refid="class_json_1_1_secure_allocator_1afefbe83997eb1da2089229771957e6bd" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>SecureAllocator</name></member>
      <member refid="class_json_1_1_secure_allocator_1a61c258f0ae80af6982fae200b55a4dc9" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>size_type</name></member>
      <member refid="class_json_1_1_secure_allocator_1ae45a020fc6d6f3ae66394c81c4281ad8" prot="public" virt="non-virtual"><scope>Json::SecureAllocator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
